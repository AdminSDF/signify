
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Safely get user data and check for role existence.
    function getRole(userId) {
      let userData = get(/databases/$(database)/documents/users/$(userId)).data;
      if ('role' in userData) {
        return userData.role;
      }
      return 'player'; // Default role if not present
    }

    function isSuperAdmin() {
      return isSignedIn() && getRole(request.auth.uid) == 'super-admin';
    }

    function isAdmin() {
      return isSignedIn() && getRole(request.auth.uid) in ['admin', 'super-admin'];
    }

    function isFinanceStaff() {
      return isSignedIn() && getRole(request.auth.uid) in ['finance-staff', 'admin', 'super-admin'];
    }

    function isSupportStaff() {
      return isSignedIn() && getRole(request.auth.uid) in ['support-staff', 'admin', 'super-admin'];
    }

    // --- Collection Rules ---

    // USERS
    match /users/{userId} {
      allow read: if isSignedIn();
      allow list: if isAdmin();
      allow create: if isOwner(userId); // Allows new users to create their own document
      allow update: if isOwner(userId) || isFinanceStaff(); // Allows user to update their own data, or finance staff to update balances

      match /notifications/{notificationId} {
        allow read, list, update, create, delete: if isOwner(userId);
      }
    }

    // USER REWARDS
    match /userRewards/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId); // Allows new users to have a reward doc created
      allow update: if isOwner(userId); // Allows user to update their own reward data (e.g., claiming)
    }
    
    // APP CONFIGURATION
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // SYSTEM STATS (Fixes "Could not load admin data")
    match /systemStats/global {
      allow read, write: if isFinanceStaff(); // Admin/Finance can access and create/update
    }

    // --- GENERIC RULES FOR REQUESTS (ADD FUNDS, WITHDRAWALS) ---
    function isRequestOwner(collectionName, requestId) {
      return isOwner(get(/databases/$(database)/documents/$(collectionName)/$(requestId)).data.userId);
    }

    function canCreateRequest(collectionName) {
      return isOwner(request.resource.data.userId);
    }
    
    match /{collectionName}/{requestId}
    where collectionName in ['withdrawalRequests', 'addFundRequests'] {
      allow read, list: if isFinanceStaff() || isRequestOwner(collectionName, requestId);
      allow create: if canCreateRequest(collectionName);
      allow update: if isFinanceStaff();
    }
    
    // TRANSACTIONS
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId) || isFinanceStaff();
      allow list: if isFinanceStaff();
    }

    // SUPPORT TICKETS
    match /supportTickets/{ticketId} {
      allow read, list: if isOwner(resource.data.userId) || isSupportStaff();
      allow create: if isOwner(request.resource.data.userId);
      // User can add messages (update), admin/support can change status (update)
      allow update: if isOwner(resource.data.userId) || isSupportStaff();
    }

    // TOURNAMENTS
    match /tournaments/{tournamentId} {
      allow read, list: if isSignedIn();
      allow create, update: if isAdmin();

      // PARTICIPANTS sub-collection
      match /participants/{userId} {
        // A user can join a tournament (create their participant doc)
        allow create: if isOwner(userId);
        // Only an admin can update a participant's score or prize
        allow update: if isAdmin();
        // Any signed-in user can view the participants/leaderboard
        allow read, list: if isSignedIn();
      }
    }

    // --- Server-Side Only Collections ---
    // These collections should only be written to by a trusted server environment (e.g., Cloud Functions).
    
    match /activityLogs/{logId} {
      allow read, write: if false;
    }

    match /fraudAlerts/{alertId} {
      allow read, write: if false;
    }
  }
}
