
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    // Checks if the requesting user has an admin role.
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super-admin'];
    }
    
    // Checks if the requesting user is a super-admin.
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super-admin';
    }

    // Checks if the user has finance staff permissions (includes admins).
    function isFinanceStaff() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['finance-staff', 'admin', 'super-admin'];
    }

    // Checks if the user has support staff permissions (includes admins).
    function isSupportStaff() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['support-staff', 'admin', 'super-admin'];
    }

    // Checks if the requesting user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Checks if a user is logged in.
    function isSignedIn() {
      return request.auth != null;
    }

    // --- Core Collections Rules ---

    // Users Collection
    match /users/{userId} {
      // Admins can read and list all users. Other users can only read specific profiles (for leaderboards etc.).
      allow list: if isAdmin();
      allow get: if isSignedIn();

      // A user can create their own account document.
      allow create: if isOwner(userId);
      
      // A user can update their own non-critical data.
      allow update: if isOwner(userId) && 
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny([
                        'role', 'balances', 'totalWinnings', 'totalSpinsPlayed', 
                        'totalDeposited', 'totalWithdrawn', 'isAdmin', 'isBlocked',
                        'spinsAvailable', 'referralEarnings', 'vipUntil'
                      ]);

      // Admins and Super-Admins have broader update permissions.
      // Note: `update` combines all `allow update` rules. An operation is allowed if ANY rule passes.
      allow update: if isAdmin(); // Admins can update most fields. Super-admin can update role.
    }
    
    // App Configuration: Only readable by all, writable by super-admins.
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // System-wide Statistics
    match /systemStats/{docId} {
      // Admins need to read and write (to initialize if not present).
      allow read, write: if isAdmin();
    }

    // --- Finance Related Collections ---

    // Transactions can be listed by finance staff. Users can read their own.
    // Transactions can only be created by the system (via an admin-triggered server action).
    match /transactions/{transactionId} {
      allow list: if isFinanceStaff();
      allow get: if isFinanceStaff() || isOwner(resource.data.userId);
      allow create: if isFinanceStaff(); // Server actions are run by admins/finance staff
    }
    
    // Add Fund Requests
    match /addFundRequests/{reqId} {
      allow list: if isFinanceStaff();
      allow get: if isFinanceStaff() || isOwner(resource.data.userId);
      allow create: if isOwner(resource.data.userId);
      allow update: if isFinanceStaff(); // Only finance staff can approve/reject via server action.
    }
    
    // Withdrawal Requests
    match /withdrawalRequests/{reqId} {
      allow list: if isFinanceStaff();
      allow get: if isFinanceStaff() || isOwner(resource.data.userId);
      allow create: if isOwner(resource.data.userId);
      allow update: if isFinanceStaff(); // Only finance staff can approve/reject via server action.
    }

    // --- User Support & Social ---

    // Support Tickets
    match /supportTickets/{ticketId} {
        allow list: if isSupportStaff();
        allow get: if isSupportStaff() || isOwner(resource.data.userId);
        // User can create a ticket for themselves.
        allow create: if isOwner(resource.data.userId);
        // User and support staff can both add messages (update the document).
        allow update: if isSupportStaff() || isOwner(resource.data.userId);
    }
    
    // User-specific subcollections like notifications and rewards
    match /users/{userId}/{subcollection}/{docId} {
      // This is a generic rule for user subcollections.
      // Read/write is allowed only by the owner of the parent user document.
      // The server (run as admin) can create notifications.
      allow read, update, delete: if isOwner(userId);
      allow create: if subcollection == 'notifications' ? isAdmin() : isOwner(userId);
    }

    // --- Tournaments ---
    match /tournaments/{tourneyId} {
        allow read: if true;
        allow list: if isSignedIn(); // Any logged-in user can list tournaments
        allow create, update: if isAdmin();

        match /participants/{userId} {
            // A user can join (create their own participant doc) via server action.
            allow create: if isOwner(userId);
            // Anyone can read participant data (for leaderboards).
            allow read: if isSignedIn();
            // Only server action (run as admin) can update score or distribute prizes.
            allow update: if isAdmin();
        }
    }
    
    // --- Other Collections ---
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
    }
    
    match /fraudAlerts/{alertId} {
      allow read, list, create, update: if isAdmin();
    }
  }
}
