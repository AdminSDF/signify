
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Default Security ---
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Public Collections ---
    match /appConfiguration/{docId} {
      allow read: if true;
    }
    
    match /tournaments/{tournamentId} {
        allow read: if isAuthenticated();
        // Writes are handled by admin panel
    }
    
    match /userTournaments/{userTournamentId} {
        allow read: if isAuthenticated();
        // Writes handled by joinTournament transaction
    }


    // --- User-Specific Collections ---
    match /users/{userId} {
      // Any authenticated user can read any user's profile data.
      // This is needed for features like leaderboards and friend profiles.
      allow read: if isAuthenticated();

      // A user can create their own document.
      allow create: if isOwner(userId);

      // A user can update their own document for most standard profile changes.
      // We also need to allow cross-user updates for the friend system, which is handled in the 'update' rule below.
      // The 'write' rule covers both create and update.
      allow write: if isOwner(userId);

      // This is the key rule to fix the "insufficient permissions" error for the friends system.
      // It allows an authenticated user to update ANOTHER user's document,
      // but ONLY if they are changing the friend-related lists.
      allow update: if isAuthenticated() {
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        let allowedFriendKeys = ['friends', 'friendRequestsSent', 'friendRequestsReceived'];
        // The update is only allowed if the ONLY keys being changed are in the allowedFriendKeys list.
        return changedKeys.hasOnly(allowedFriendKeys);
      }
      
      // Users cannot delete their own accounts from the client.
      allow delete: if false;

      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Transactions can only be read by the owner. Created server-side.
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Requests can be created and read by the owner.
    match /withdrawalRequests/{requestId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    match /addFundRequests/{requestId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    match /supportTickets/{ticketId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    match /userRewards/{userId} {
      allow read: if isOwner(userId);
      // Writes are handled by claimDailyReward transaction which is invoked from client but rules are checked.
      // Since it updates the user document as well, the rules for user document update need to be correct.
    }

     match /activityLogs/{logId} {
        allow create: if isAuthenticated();
     }

     match /systemStats/global {
        allow read: if isAuthenticated();
     }

     match /fraudAlerts/{alertId} {
        allow read: if isAuthenticated();
     }
  }
}
