
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super-admin';
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super-admin'];
    }
    function isSupportStaff() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['support-staff', 'admin', 'super-admin'];
    }
    function isFinanceStaff() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['finance-staff', 'admin', 'super-admin'];
    }
    function isAuthenticated() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- COLLECTION RULES ---

    // Users Collection
    match /users/{userId} {
      // READ: Any authenticated user can read any profile (for leaderboards, referrals, etc.), but only owners can read their own sensitive info (if any is added).
      allow read: if isAuthenticated();

      // CREATE: A user can only create their own document.
      allow create: if isOwner(userId);

      // UPDATE: A user can only update their own non-critical data.
      // Admins have more permissions.
      allow update: if isOwner(userId) && !(
                        'balances' in request.resource.data ||
                        'role' in request.resource.data ||
                        'isBlocked' in request.resource.data ||
                        'isAdmin' in request.resource.data ||
                        'totalWinnings' in request.resource.data ||
                        'referralEarnings' in request.resource.data ||
                        'referrals' in request.resource.data
                      ) || isSuperAdmin(); // Super admin can update anything.
    }
    
    // Notifications Subcollection (within Users)
    match /users/{userId}/notifications/{notificationId} {
        allow read, write: if isOwner(userId); // Only the user can read/write their own notifications.
    }

    // App Configuration Collection
    match /appConfiguration/{docId} {
      allow read: if true; // Everyone can read app config.
      allow write: if isSuperAdmin(); // Only super admins can change settings.
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff(); // User can read their own, Finance/Admins can read all.
      allow create: if false; // Transactions must be created by server actions ONLY.
      allow update, delete: if false; // No one can modify transactions.
    }

    // Add Fund Requests Collection
    match /addFundRequests/{requestId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId); // User can create their own request.
      allow update: if isFinanceStaff(); // Only finance staff can approve/reject.
      allow delete: if false;
    }

    // Withdrawal Requests Collection
    match /withdrawalRequests/{requestId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId); // User can create their own request.
      allow update: if isFinanceStaff(); // Only finance staff can approve/reject.
      allow delete: if false;
    }

    // Support Tickets Collection (Conversational)
    match /supportTickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isSupportStaff();
      
      // CREATE: User creates a ticket with their initial message.
      allow create: if isOwner(request.resource.data.userId)
                    && request.resource.data.messages.size() == 1
                    && request.resource.data.messages[0].senderId == request.auth.uid;

      // UPDATE: Two scenarios for updating a ticket:
      // 1. User adds a message.
      // 2. Admin adds a message and/or changes status.
      allow update: if (
        // SCENARIO 1: User is adding a new message
        isOwner(resource.data.userId) &&
        request.resource.data.messages.size() == resource.data.messages.size() + 1 && // Only one message can be added
        request.resource.data.messages[-1].senderId == request.auth.uid && // The new message sender is the current user
        request.resource.data.status == 'customer-reply' && // The new status must be 'customer-reply'
        request.resource.data.subject == resource.data.subject && // Subject cannot be changed
        request.resource.data.createdAt == resource.data.createdAt // Creation date cannot be changed
      ) || (
        // SCENARIO 2: Support Staff is managing the ticket
        isSupportStaff() &&
        (
          // They can add a message
          (request.resource.data.messages.size() == resource.data.messages.size() + 1 &&
           request.resource.data.messages[-1].senderId == request.auth.uid) ||
          // OR they can just change the status without adding a message
          request.resource.data.messages.size() == resource.data.messages.size()
        )
      );

      allow delete: if isSuperAdmin(); // Only super admins can delete tickets.
    }

    // Activity Logs Collection
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only server can write logs.
    }

    // Fraud Alerts Collection
    match /fraudAlerts/{alertId} {
       allow read: if isAdmin();
       allow write: if false; // Only server can write alerts.
    }
    
    // System Stats Collection
    match /systemStats/{statId} {
        allow read: if isAdmin();
        allow write: if false; // Only server actions can update stats.
    }
    
    // User Rewards Collection
    match /userRewards/{userId} {
        allow read: if isOwner(userId);
        allow write: if false; // Only server can write rewards.
    }
    
    // Tournaments Collection
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin(); // Only super admins can create/update tournaments directly.
      
      // Participants Subcollection
      match /participants/{userId} {
        allow read: if isAuthenticated();
        allow write: if false; // All joins/updates handled by server actions.
      }
    }
  }
}
