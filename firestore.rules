
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // This function CHECKS if the user document exists before trying to read from it.
    function isRole(role) {
      let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
      return isSignedIn() && exists(userDocPath) && get(userDocPath).data.role == role;
    }

    function isSuperAdmin() {
      return isRole('super-admin');
    }
    function isAdmin() {
      return isRole('admin') || isSuperAdmin();
    }
    function isFinanceStaff() {
       return isRole('finance-staff') || isAdmin();
    }
    function isSupportStaff() {
       return isRole('support-staff') || isAdmin();
    }
    
    // --- Collection Rules ---
    match /users/{userId} {
      // User can CREATE their own doc during signup. No role check needed here.
      allow create: if isOwner(userId);
      
      // ANY signed-in user can READ public profile data.
      allow get: if isSignedIn();
      
      // ONLY admins can LIST all users.
      allow list: if isAdmin();
      
      // A user can UPDATE their own data. An admin can update anyone's data.
      allow update: if isOwner(userId) || isAdmin();
      
      // No one can delete users from the client.
      allow delete: if false;

      // Notifications are private to the user.
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // User can only create, read, and update their own reward document.
    match /userRewards/{userId} {
      // Must be owner to do anything
      allow read, update, create: if isOwner(userId);
      allow delete: if false;
    }
    
    // Transactions can be created by server actions. Users can only read their own.
    match /transactions/{transactionId} {
      allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || isFinanceStaff());
      allow list: if isFinanceStaff();
      allow create: if isSignedIn();
      allow update, delete: if isFinanceStaff();
    }
    
    // Users can create their own requests. Finance staff can manage them.
    match /{collectionName=withdrawalRequests,addFundRequests}/{requestId} {
      allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || isFinanceStaff());
      allow list: if isFinanceStaff();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isFinanceStaff();
      allow delete: if isFinanceStaff();
    }

    // Users can create and update their own tickets. Support staff can manage all.
    match /supportTickets/{ticketId} {
        allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || isSupportStaff());
        allow list: if isSupportStaff();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && (resource.data.userId == request.auth.uid || isSupportStaff());
        allow delete: if isSupportStaff();
    }
    
    // Tournaments are public to read, but only managed by admins.
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      
      match /participants/{userId} {
        allow read: if isSignedIn();
        allow create: if isOwner(userId);
        allow update, delete: if isAdmin();
      }
    }
    
    // System-wide configuration and stats.
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    match /systemStats/{docId} {
      allow read, write: if isFinanceStaff();
    }
    
    match /activityLogs/{logId} {
      allow read, list: if isSuperAdmin();
      allow create: if isSignedIn();
    }
    
    match /fraudAlerts/{alertId} {
        allow read, list: if isAdmin();
        allow write: if isSuperAdmin();
    }
  }
}
