rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---------------------------------------------------------------------
    // Helper Functions
    // ---------------------------------------------------------------------
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // IMPORTANT: Replace with your actual admin email if needed elsewhere,
    // but the primary check is the `isAdmin` field in the user's document.
    function isAdminByEmail(email) {
      return email == "jameafaizanrasool@gmail.com";
    }

    function getIncomingData() {
      return request.resource.data;
    }

    function getExistingData() {
      return resource.data;
    }

    function isUserAdmin(userId) {
      return isAuthenticated() &&
             userId != null && userId != "" && // Ensure userId is valid before get()
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // ---------------------------------------------------------------------
    // USERS Collection
    // ---------------------------------------------------------------------
    match /users/{userId} {
      // Admins can get any user doc. Users can get their own.
      allow get: if isOwner(userId) || isUserAdmin(request.auth.uid);
      // Only admins can list all users.
      allow list: if isUserAdmin(request.auth.uid);

      allow create: if isOwner(userId) &&
        getIncomingData().uid == userId &&
        getIncomingData().email == request.auth.token.email &&
        getIncomingData().createdAt == request.time &&
        getIncomingData().balance is number &&
        getIncomingData().spinsAvailable is number &&
        getIncomingData().dailyPaidSpinsUsed == 0 &&
        getIncomingData().lastPaidSpinDate is string &&
        (getIncomingData().isAdmin == false || isAdminByEmail(getIncomingData().email)) &&
        getIncomingData().totalWinnings == 0 &&
        getIncomingData().totalSpinsPlayed == 0 &&
        (!('lastLogin' in getIncomingData()) || getIncomingData().lastLogin == request.time) &&
        getIncomingData().keys().hasOnly([
          'uid', 'email', 'displayName', 'photoURL', 'createdAt', 'balance',
          'spinsAvailable', 'dailyPaidSpinsUsed', 'lastPaidSpinDate', 'isAdmin',
          'lastLogin', 'totalWinnings', 'totalSpinsPlayed',
          'upiIdForWithdrawal', 'bankDetailsForWithdrawal'
        ]);

       allow update: if (isOwner(userId) &&
        // Immutable fields check
        getIncomingData().uid == getExistingData().uid &&
        getIncomingData().email == getExistingData().email &&
        getIncomingData().createdAt == getExistingData().createdAt &&
        // Admin status cannot be changed by non-admin user
        (getIncomingData().isAdmin == getExistingData().isAdmin || isUserAdmin(request.auth.uid)) &&
        // Allowed fields for update by owner
        getIncomingData().keys().hasOnly([
          'displayName', 'photoURL', 'lastLogin', 
          'upiIdForWithdrawal', 'bankDetailsForWithdrawal',
          'dailyPaidSpinsUsed', 'lastPaidSpinDate',
          'totalWinnings', 'totalSpinsPlayed',
          'balance', 'spinsAvailable',
          'uid', 'email', 'createdAt', 'isAdmin'
        ]) &&
        // Type checks for updatable fields if they are present in the request
        (!('displayName' in getIncomingData()) || getIncomingData().displayName is string || getIncomingData().displayName == null) &&
        (!('photoURL' in getIncomingData()) || getIncomingData().photoURL is string || getIncomingData().photoURL == null) &&
        (!('lastLogin' in getIncomingData()) || getIncomingData().lastLogin is timestamp) &&
        (!('balance' in getIncomingData()) || getIncomingData().balance is number) &&
        (!('spinsAvailable' in getIncomingData()) || getIncomingData().spinsAvailable is number)
      ) || isUserAdmin(request.auth.uid);

      allow delete: if isUserAdmin(request.auth.uid);
    }

    // ---------------------------------------------------------------------
    // TRANSACTIONS Collection
    // ---------------------------------------------------------------------
    match /transactions/{transactionId} {
      // A user can get their own transactions. An admin can get any.
      allow get: if isAuthenticated() && (getExistingData().userId == request.auth.uid || isUserAdmin(request.auth.uid));
      // A user can query for their own transactions. An admin can query all.
      allow list: if isAuthenticated();

      allow create: if isAuthenticated() &&
        getIncomingData().userId == request.auth.uid &&
        getIncomingData().type in ['credit', 'debit'] &&
        getIncomingData().amount is number &&
        getIncomingData().description is string &&
        getIncomingData().status in ['completed', 'pending', 'failed'] &&
        getIncomingData().date is timestamp &&
        // Optional fields check
        (!('balanceBefore' in getIncomingData()) || getIncomingData().balanceBefore is number) &&
        (!('balanceAfter' in getIncomingData()) || getIncomingData().balanceAfter is number) &&
        // Ensure only allowed fields are present
        getIncomingData().keys().hasOnly([
          'userId', 'type', 'amount', 'description', 'status', 'date',
          'balanceBefore', 'balanceAfter'
        ]);

      allow update, delete: if isUserAdmin(request.auth.uid);
    }

    // ---------------------------------------------------------------------
    // WITHDRAWAL REQUESTS Collection
    // ---------------------------------------------------------------------
    match /withdrawalRequests/{requestId} {
      allow get: if isAuthenticated() && (getExistingData().userId == request.auth.uid || isUserAdmin(request.auth.uid));
      allow list: if isUserAdmin(request.auth.uid);

      allow create: if isAuthenticated() &&
        getIncomingData().userId == request.auth.uid &&
        getIncomingData().userEmail == request.auth.token.email &&
        getIncomingData().amount is number && getIncomingData().amount > 0 &&
        getIncomingData().paymentMethod in ['upi', 'bank'] &&
        getIncomingData().requestDate is timestamp &&
        getIncomingData().status == "pending" &&
        getIncomingData().keys().hasOnly([
          'userId', 'userEmail', 'amount', 'paymentMethod', 'upiId',
          'bankDetails', 'requestDate', 'status'
        ]);

       allow update: if isUserAdmin(request.auth.uid);

      allow delete: if isUserAdmin(request.auth.uid);
    }

    // ---------------------------------------------------------------------
    // ADD FUND REQUESTS Collection
    // ---------------------------------------------------------------------
    match /addFundRequests/{requestId} {
      allow get: if isAuthenticated() && (getExistingData().userId == request.auth.uid || isUserAdmin(request.auth.uid));
      allow list: if isUserAdmin(request.auth.uid);

      allow create: if isAuthenticated() &&
        getIncomingData().userId == request.auth.uid &&
        getIncomingData().userEmail == request.auth.token.email &&
        getIncomingData().amount is number && getIncomingData().amount > 0 &&
        getIncomingData().paymentReference is string &&
        getIncomingData().requestDate is timestamp &&
        getIncomingData().status == "pending" &&
        getIncomingData().keys().hasOnly([
          'userId', 'userEmail', 'amount', 'paymentReference', 'requestDate', 'status'
        ]);

      allow update: if isUserAdmin(request.auth.uid);

      allow delete: if isUserAdmin(request.auth.uid);
    }

    // ---------------------------------------------------------------------
    // APP CONFIGURATION Collection
    // ---------------------------------------------------------------------
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isUserAdmin(request.auth.uid);
    }
  }
}
