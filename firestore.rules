rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      // Checks if the requesting user is the owner of the document.
      return isAuth() && request.auth.uid == userId;
    }

    function getUserRole() {
      // Safely gets the user's role from their document.
      // Returns 'player' if the document doesn't exist yet (e.g., during signup).
      if (exists(/databases/$(database)/documents/users/$(request.auth.uid))) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      }
      return 'player';
    }

    function isAdmin() {
      return isAuth() && getUserRole() in ['admin', 'super-admin'];
    }

    function isSuperAdmin() {
      return isAuth() && getUserRole() == 'super-admin';
    }

    function isFinanceStaff() {
      return isAuth() && getUserRole() in ['finance-staff', 'admin', 'super-admin'];
    }

    function isSupportStaff() {
      return isAuth() && getUserRole() in ['support-staff', 'admin', 'super-admin'];
    }

    // =================================
    // Collection Rules
    // =================================

    match /users/{userId} {
      // ANY authenticated user can CREATE their OWN user document.
      // The `createUserData` function on the client constructs the initial document.
      allow create: if isOwner(userId);

      // Users can READ their own data. Admins can READ ANY user's data.
      allow read: if isOwner(userId) || isAdmin();
      
      // Admins can LIST all users.
      allow list: if isAdmin();

      // Users can UPDATE their own data, but cannot change their role or blocked status.
      // SUPER ADMINS can update anything for any user.
      allow update: if (isOwner(userId) && request.resource.data.role == resource.data.role && request.resource.data.isBlocked == resource.data.isBlocked) || isSuperAdmin();

      allow delete: if false; // Deletions should be handled by a secure backend process.

      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }

    match /userRewards/{userId} {
      allow create: if isOwner(userId);
      allow read: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    match /transactions/{transactionId} {
      allow read: if (isAuth() && resource.data.userId == request.auth.uid) || isFinanceStaff();
      allow list: if isFinanceStaff();
      allow write: if false; // Written by server actions
    }

    match /{requestCollection}/{requestId} where requestCollection in ['addFundRequests', 'withdrawalRequests'] {
       allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
       allow read: if (isAuth() && resource.data.userId == request.auth.uid) || isFinanceStaff();
       allow list: if isFinanceStaff();
       allow update, delete: if false; // Updated by server actions
    }

    match /supportTickets/{ticketId} {
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow read: if (isAuth() && resource.data.userId == request.auth.uid) || isSupportStaff();
      allow list: if isSupportStaff();
      // User can update their own ticket (add messages), or support staff can update any.
      allow update: if (isAuth() && resource.data.userId == request.auth.uid) || isSupportStaff();
      allow delete: if false;
    }

    match /tournaments/{tournamentId} {
        allow read, list: if isAuth();
        allow create, update: if isSuperAdmin();
        allow delete: if false;

        match /participants/{userId} {
            allow read, list: if isAuth();
            allow write: if false; // Joined via server action
        }
    }

    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    match /systemStats/{docId} {
      allow read: if isAdmin();
      allow write: if false; // Written by server actions
    }

    match /activityLogs/{logId} {
       allow read, write: if false;
    }

    match /fraudAlerts/{alertId} {
       allow read, list: if isAdmin();
       allow write: if false;
    }
  }
}