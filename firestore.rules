
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users: Can read all profiles, but only update their own.
    // Friend request logic requires one user to update another's doc, so we allow any logged-in user to update.
    // This is a trade-off for client-side implementation. For higher security, this should be a Cloud Function.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow list: if isAdmin(); // Only admins can list all users.
      allow create: if isOwner(userId);
      // Allow user to update their own document, and allow any user to update another user's document for friend system.
      // A more secure rule would limit which fields can be changed by others.
      allow update: if request.auth != null;
    }

    // Notifications: Can only be managed by the user they belong to.
    match /users/{userId}/notifications/{notificationId} {
        allow read, write, create, delete: if isOwner(userId) || isAdmin();
    }

    // App Config: Readable by all authenticated, writable by admins.
    match /appConfiguration/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Activity Logs: Writable by user, readable/deletable by admin.
    match /activityLogs/{logId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isAdmin();
    }

    // Requests (Withdrawal/Add Fund): User can create and read their own. Admin can read/write all.
    match /withdrawalRequests/{reqId} {
       allow create: if isOwner(request.resource.data.userId);
       allow read, list: if isOwner(resource.data.userId) || isAdmin();
       allow write: if isAdmin();
    }
    match /addFundRequests/{reqId} {
       allow create: if isOwner(request.resource.data.userId);
       allow read, list: if isOwner(resource.data.userId) || isAdmin();
       allow write: if isAdmin();
    }
    
    // Support Tickets: User can create. Admin can manage.
    match /supportTickets/{ticketId} {
       allow create: if isOwner(request.resource.data.userId);
       allow read, list, write: if isAdmin();
    }
    
    // System Stats: Readable by all, writable by admin.
    match /systemStats/{statId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Transactions: User can create/read their own. Immutable otherwise. Admin can read all.
    match /transactions/{transactionId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow update, delete: if false;
    }

    // User Rewards: Read/write by the user themselves or admin.
    match /userRewards/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // Tournaments: Readable by all, writable by admin.
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow list: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // User Tournament Data: Readable by all. Writable by the user or admin.
    match /userTournaments/{userTournamentId} {
      allow read: if true;
      allow list: if request.auth != null;
      allow create, update: if isOwner(request.resource.data.userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Fraud Alerts: Admin only.
    match /fraudAlerts/{alertId} {
      allow read, list, write: if isAdmin();
    }
    
  }
}
