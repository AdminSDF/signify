rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user is authenticated and their user document has isAdmin set to true.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isUpdatingOnlyOwnSafeFields() {
      // WARNING: 'balances' and 'spinsAvailable' are allowed here for client-side reward claims.
      // This is a security risk. A proper solution uses Cloud Functions for reward logic.
      let nonUpdatable = [
        'uid', 'email', 'createdAt', 'isAdmin', 'isBlocked',
        'totalWinnings', 'totalSpinsPlayed', 'totalWins', 'totalDeposited', 'totalWithdrawn',
        'referralCode', 'referralEarnings', 'referredBy', 'referrals', 'vipUntil',
        'friends', 'friendRequestsSent', 'friendRequestsReceived'
      ];
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(nonUpdatable);
    }
    
    function isUpdatingOnlyCrossUserFields() {
        let allowedCrossUserFields = ['friends', 'friendRequestsSent', 'friendRequestsReceived', 'referrals'];
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedCrossUserFields);
    }

    match /users/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isOwner(userId);
      // Admin can update any user field. Regular user can update own safe fields or cross-user friendship fields.
      allow update: if isSignedIn() && (
        isAdmin() ||
        (isOwner(userId) && isUpdatingOnlyOwnSafeFields()) ||
        isUpdatingOnlyCrossUserFields()
      );
    }

    match /userRewards/{userId} {
       allow get, create, update: if isSignedIn() && isOwner(userId);
    }

    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /transactions/{transactionId} {
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }
    
    match /withdrawalRequests/{reqId} {
       allow get: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
       allow list: if isAdmin();
       allow create: if isSignedIn() && isOwner(request.resource.data.userId);
       allow update: if isAdmin();
       allow delete: if false;
    }
    
    match /addFundRequests/{reqId} {
       allow get: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
       allow list: if isAdmin();
       allow create: if isSignedIn() && isOwner(request.resource.data.userId);
       allow update: if isAdmin();
       allow delete: if false;
    }
    
    match /supportTickets/{ticketId} {
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isAdmin();
      allow delete: if false;
    }

    match /users/{userId}/notifications/{notificationId} {
        allow read, create, update: if isSignedIn() && isOwner(userId);
        allow delete: if false;
    }
    
    match /tournaments/{tournamentId} {
        allow read: if isSignedIn();
        allow create, update: if isAdmin();
        allow delete: if false;
    }
    
    match /userTournaments/{userTournamentId} {
        allow read: if isSignedIn();
        allow update: if isAdmin();
        allow create, delete: if false;
    }
    
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    match /fraudAlerts/{alertId} {
      allow read: if isAdmin();
      allow update: if isAdmin();
      allow create, delete: if false;
    }
    
    match /systemStats/{statId} {
      allow read: if isAdmin();
      allow write: if false;
    }
  }
}
