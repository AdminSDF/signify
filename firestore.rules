
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---------------------------------------------------------------------
    // Helper Functions
    // ---------------------------------------------------------------------
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isUserAdmin(userId) {
      // Check if the user document exists and has the isAdmin flag set to true.
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }
    
    function isAdminByEmail() {
      return isAuthenticated() && request.auth.token.email == "jameafaizanrasool@gmail.com";
    }

    function getIncomingData() {
      return request.resource.data;
    }

    function getExistingData() {
      return resource.data;
    }

    // ---------------------------------------------------------------------
    // USERS Collection
    // ---------------------------------------------------------------------
    match /users/{userId} {
      allow read: if isOwner(userId) || isUserAdmin(request.auth.uid);

      allow create: if isOwner(userId); // Simplified: Any authenticated user can create their own doc. Fine-tuning can be done in client/functions.

      allow update: if isOwner(userId) || isUserAdmin(request.auth.uid); // Admins can update anything. Owners can update their own data.

      allow delete: if isUserAdmin(request.auth.uid);
    }
    
    // ---------------------------------------------------------------------
    // TRANSACTIONS Collection
    // ---------------------------------------------------------------------
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        getExistingData().userId == request.auth.uid || isUserAdmin(request.auth.uid)
      );

      // FIX: Allow transaction creation if the user is creating it for themselves OR if an admin is creating it.
      // This is crucial for the admin panel approval process.
      allow create: if isAuthenticated() && (
        (getIncomingData().userId == request.auth.uid) || isUserAdmin(request.auth.uid)
      );

      // Only admins can update or delete transactions to maintain integrity
      allow update, delete: if isUserAdmin(request.auth.uid);
    }

    // ---------------------------------------------------------------------
    // WITHDRAWAL & ADD FUND REQUESTS Collections
    // ---------------------------------------------------------------------
    match /withdrawalRequests/{requestId} {
      allow read: if isAuthenticated() && (getExistingData().userId == request.auth.uid || isUserAdmin(request.auth.uid));
      
      allow list: if isUserAdmin(request.auth.uid); // Admin can list all requests.
      
      allow create: if isAuthenticated() && getIncomingData().userId == request.auth.uid;
      
      allow update: if isUserAdmin(request.auth.uid);
      
      allow delete: if isUserAdmin(request.auth.uid);
    }

    match /addFundRequests/{requestId} {
       allow read: if isAuthenticated() && (getExistingData().userId == request.auth.uid || isUserAdmin(request.auth.uid));
       
       allow list: if isUserAdmin(request.auth.uid); // Admin can list all requests.

       allow create: if isAuthenticated() && getIncomingData().userId == request.auth.uid;
       
       allow update: if isUserAdmin(request.auth.uid);
       
       allow delete: if isUserAdmin(request.auth.uid);
    }
    

    // ---------------------------------------------------------------------
    // APP CONFIGURATION Collection
    // ---------------------------------------------------------------------
    match /appConfiguration/{docId} {
      allow read: if true;
      // Allow write if user has isAdmin flag OR if their email is the designated admin email.
      allow write: if isUserAdmin(request.auth.uid) || isAdminByEmail();
    }
  }
}
