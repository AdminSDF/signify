
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Checks if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Gets the role of the currently authenticated user
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('role', 'player');
    }

    // Role-based access checks
    function isSuperAdmin() {
      return isAuthenticated() && getRole() == 'super-admin';
    }

    function isAdmin() {
      return isAuthenticated() && (getRole() == 'admin' || isSuperAdmin());
    }

    function isFinanceStaff() {
      return isAuthenticated() && (getRole() == 'finance-staff' || isAdmin());
    }

    function isSupportStaff() {
      return isAuthenticated() && (getRole() == 'support-staff' || isAdmin());
    }

    // --- Users Collection ---
    match /users/{userId} {
      // READ: Anyone authenticated can read their own doc. Admins can read any doc. Users can read limited data of friends.
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin() || userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friends);

      // CREATE: A user can create their OWN document upon signup.
      allow create: if isOwner(userId)
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.isBlocked == false
                    && (!('role' in request.resource.data) || request.resource.data.role == 'player');

      // UPDATE: A user can update their own non-sensitive info. Admins can update more.
      allow update: if isAuthenticated() && (
        ( // A user can update their own profile
          isOwner(userId) &&
          request.resource.data.uid == resource.data.uid &&
          request.resource.data.email == resource.data.email &&
          request.resource.data.createdAt == resource.data.createdAt &&
          // User cannot change these protected fields
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'lastActive', 'isOnline', 'currentGame', 'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'toursCompleted', 'tags', 'recentSpinHistory', 'devices', 'friendRequestsSent', 'friendRequestsReceived', 'friends'])
        ) || ( // An admin can update certain fields
          isAdmin() &&
          // Admins cannot change a super-admin's details unless they are also a super-admin
          (resource.data.get('role', 'player') != 'super-admin' || isSuperAdmin())
        )
      );

      // DELETE: Nobody can delete user accounts.
      allow delete: if false;

      // --- Notifications Subcollection ---
      match /notifications/{notificationId} {
        // READ/UPDATE: Only the user can read/update their own notifications.
        allow read, update: if isOwner(userId);
        // CREATE/DELETE: Notifications are created by server-side logic, not clients.
        allow create, delete: if false;
      }
    }

    // --- App Configuration ---
    match /appConfiguration/main {
      // READ: Any authenticated user can read the app config.
      allow read: if isAuthenticated();
      // WRITE: Only Super Admins can change the app configuration.
      allow write: if isSuperAdmin();
    }
    
    // --- System Stats ---
    match /systemStats/global {
        // READ: Only Admins can read global stats
        allow read: if isAdmin();
        // WRITE: Only server can update. Block client writes.
        allow write: if false;
    }

    // --- Requests (Add Funds & Withdrawals) ---
    match /addFundRequests/{requestId} {
      // READ: User can read their own request. Finance staff can read all.
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isFinanceStaff());
      // CREATE: User can create their own request.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // UPDATE/DELETE: Only server can update. No one can delete.
      allow update, delete: if false;
    }

    match /withdrawalRequests/{requestId} {
      // READ: User can read their own request. Finance staff can read all.
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isFinanceStaff());
      // CREATE: User can create their own request.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // UPDATE/DELETE: Only server can update. No one can delete.
      allow update, delete: if false;
    }

    // --- Transactions ---
    match /transactions/{transactionId} {
      // READ: User can read their own transactions. Finance staff can read all.
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isFinanceStaff());
      // WRITE: Transactions are immutable records created by the server.
      allow write: if false;
    }

    // --- Support Tickets ---
    match /supportTickets/{ticketId} {
      // READ: Owner or support staff can read.
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isSupportStaff());
      // CREATE: User can create their own ticket.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // UPDATE: User can add a message. Support can add a message and change status.
      allow update: if isAuthenticated() && (
        ( // User can add a message to their own ticket
          isOwner(resource.data.userId) &&
          request.resource.data.status == 'customer-reply' &&
          request.resource.data.messages.size() == resource.data.messages.size() + 1
        ) ||
        ( // Support staff can add a message and update status
          isSupportStaff()
        )
      );
      // DELETE: Nobody can delete tickets.
      allow delete: if false;
    }
    
    // --- User Rewards ---
    match /userRewards/{userId} {
        // READ: Only the owner.
        allow read: if isAuthenticated() && isOwner(userId);
        // WRITE: Created during signup, updated only by server actions.
        allow create: if isOwner(userId);
        allow update, delete: if false;
    }
    
    // --- Tournaments ---
    match /tournaments/{tournamentId} {
        // READ: All authenticated users can see tournaments.
        allow read: if isAuthenticated();
        // WRITE: Only admins can create/update tournaments.
        allow write: if isAdmin();
        
        // --- Participants Subcollection ---
        match /participants/{userId} {
            // READ: Anyone authenticated can see participants for leaderboards.
            allow read: if isAuthenticated();
            // WRITE: Only server actions can create/update participant data.
            allow write: if false;
        }
    }
    
    // --- Activity Logs & Fraud Alerts (Write-only from server, Read-only for Admin) ---
    match /activityLogs/{logId} {
        allow read: if isAdmin();
        allow write: if false; // Only server can write
    }
    
    match /fraudAlerts/{alertId} {
        allow read: if isAdmin();
        allow write: if false; // Only server can write
    }
  }
}
