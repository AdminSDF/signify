rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // --- PUBLIC COLLECTIONS ---
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /systemStats/{statId} {
      allow read: if isAdmin();
      allow write: if false; // Server-only writes
    }

    match /fraudAlerts/{alertId} {
      allow read: if isAdmin();
      allow write: if false; // Server-only writes
    }

    // --- USER-SPECIFIC & PROTECTED COLLECTIONS ---
    match /users/{userId} {
      // ANY authenticated user can READ any user's profile. 
      // This is needed for features like friends lists and leaderboards.
      // Assumes no highly sensitive data is stored directly on the user doc.
      allow read: if isSignedIn();
      
      // ONLY the owner can create or update their own document.
      allow create: if isOwner(userId);
      
      // A user can update their own document.
      // Additionally, another user can update this document ONLY to modify the `friends`
      // or `friendRequestsSent` arrays, which is required for accepting a friend request.
      allow update: if isOwner(userId) || (
        isSignedIn() &&
        (
          // Logic for accepting a friend request: The person accepting modifies the sender's document
          (request.resource.data.keys().hasAll(['friends', 'friendRequestsSent'])) ||
          // Logic for removing a friend
          (request.resource.data.keys().hasAll(['friends']))
        )
      );
    }
    
    match /transactions/{transactionId} {
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId); // Created by user actions
    }
    
    match /withdrawalRequests/{reqId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin(); // Only admins can approve/reject
    }
    
    match /addFundRequests/{reqId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin(); // Only admins can approve/reject
    }
    
    match /supportTickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin(); // Only admins can resolve
    }
    
    match /userRewards/{userId} {
      allow read, update: if isOwner(userId);
    }
    
    match /userTournaments/{docId} {
      allow read: if isSignedIn();
      // User can only create/update their own tournament data
      // ID format is "userId_tournamentId"
      allow write: if isSignedIn() && request.auth.uid == docId.split('_')[0];
    }
    
    match /users/{userId}/notifications/{notifId} {
      allow read, list, update: if isOwner(userId);
      // Another user needs to be able to create a notification for a friend request.
      allow create: if isSignedIn();
    }
    
    match /activityLogs/{logId} {
      allow read, write: if false; // Server-side writes only for security
    }
  }
}
