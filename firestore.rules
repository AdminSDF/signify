rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getRole() {
      // Safely access role, default to 'player' if not present
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('role', 'player');
    }

    function isRole(roles) {
      return isSignedIn() && getRole() in roles;
    }
    
    // Default Deny All - All paths must have explicit rules
    match /{document=**} {
      allow read, write: if false;
    }

    //============================================================
    // Users Collection
    //============================================================
    match /users/{userId} {
      // READ: Any signed-in user can read public profile data.
      allow get: if isSignedIn();
      // LIST: Only admins can list all users for the admin panel.
      allow list: if isRole(['super-admin', 'admin']);

      // CREATE: A user can create their own document upon signup.
      allow create: if isUser(userId);

      // UPDATE: A user can update their own non-critical fields.
      // Admins can update any user's document for management.
      allow update: if (isUser(userId) && !(
                      'balances' in request.resource.data || 
                      'role' in request.resource.data || 
                      'isAdmin' in request.resource.data ||
                      'totalWinnings' in request.resource.data ||
                      'referralEarnings' in request.resource.data
                    )) || isRole(['super-admin', 'admin']);
    }

    //============================================================
    // App Configuration
    //============================================================
    match /appConfiguration/{docId} {
      // READ: Any user can read the app configuration.
      allow get: if true;
      // WRITE: Only super-admins can change the app configuration.
      allow write: if isRole(['super-admin']);
    }

    //============================================================
    // Financial Collections (Transactions, Requests)
    //============================================================
    function canAccessFinance() {
      return isRole(['super-admin', 'admin', 'finance-staff']);
    }

    match /transactions/{transactionId} {
      // READ: User can read their own, finance/admins can read any.
      allow get: if isSignedIn() && (canAccessFinance() || resource.data.userId == request.auth.uid);
      // LIST: Finance/admins can list transactions for admin panel.
      allow list: if canAccessFinance();
      // CREATE: Created by server actions, triggered by users or admins.
      // An admin approving a deposit will create a transaction for another user.
      allow create: if isSignedIn();
    }

    match /withdrawalRequests/{requestId} {
      allow get: if isSignedIn() && (canAccessFinance() || resource.data.userId == request.auth.uid);
      allow list: if canAccessFinance();
      // CREATE: User can create their own request.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // UPDATE: Only finance/admins can approve/reject.
      allow update: if canAccessFinance();
    }
    
    match /addFundRequests/{requestId} {
      allow get: if isSignedIn() && (canAccessFinance() || resource.data.userId == request.auth.uid);
      allow list: if canAccessFinance();
      // CREATE: User can create their own request.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // UPDATE: Only finance/admins can approve/reject.
      allow update: if canAccessFinance();
    }
    
    //============================================================
    // Support Tickets
    //============================================================
    function canAccessSupport() {
      return isRole(['super-admin', 'admin', 'support-staff']);
    }

    match /supportTickets/{ticketId} {
        allow get: if isSignedIn() && (canAccessSupport() || resource.data.userId == request.auth.uid);
        allow list: if canAccessSupport();
        // CREATE: User can create their own ticket.
        allow create: if isUser(request.resource.data.userId);
        // UPDATE: User can add messages to their own ticket. Support/admins can update any.
        allow update: if canAccessSupport() || (isUser(resource.data.userId) && request.resource.data.status == 'customer-reply');
    }

    //============================================================
    // System & Activity
    //============================================================
     match /systemStats/{statId} {
      // READ/WRITE: Only accessible by admins for analytics and approvals.
      allow read, write: if canAccessFinance();
    }
    
    match /activityLogs/{logId} {
        // READ: Only admins for analytics.
        allow read, list: if isRole(['super-admin', 'admin']);
        // CREATE: Any signed-in user's actions can be logged by the server.
        allow create: if isSignedIn();
    }

    match /fraudAlerts/{alertId} {
        allow read, list: if isRole(['super-admin', 'admin']);
        // Server creates these.
        allow create: if isRole(['super-admin', 'admin']);
    }

    //============================================================
    // Tournaments
    //============================================================
    match /tournaments/{tournamentId} {
      // READ: Anyone can see tournament details.
      allow get, list: if isSignedIn();
      // WRITE: Only admins can create/update tournaments.
      allow write: if isRole(['super-admin', 'admin']);
      
      // Participants Subcollection
      match /participants/{userId} {
        allow get, list: if isSignedIn();
        // CREATE: A user can join a tournament (create their own participant doc).
        allow create: if isUser(userId);
        // UPDATE: Score updates happen via server. User cannot update their own score.
        // Prize distribution also happens via server. Admins can update.
        allow update: if isRole(['super-admin', 'admin']);
      }
    }
    
    //============================================================
    // User Rewards & Notifications (Subcollections of User)
    //============================================================
    match /userRewards/{userId} {
      // A user can only access their own reward data.
      allow read, write: if isUser(userId);
    }
    
    match /users/{userId}/notifications/{notificationId} {
       // A user can only access their own notifications.
       allow read, list, write: if isUser(userId);
    }
  }
}
