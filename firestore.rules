
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getRequestingUserRole() {
      if (!isAuthenticated()) { return 'player'; }
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isSuperAdmin() {
      return getRequestingUserRole() == 'super-admin';
    }

    function isAdmin() {
      let role = getRequestingUserRole();
      return role == 'admin' || role == 'super-admin';
    }
    
    function isSupportStaff() {
      let role = getRequestingUserRole();
      return role == 'support-staff' || isAdmin();
    }

    function isFinanceStaff() {
      let role = getRequestingUserRole();
      return role == 'finance-staff' || isAdmin();
    }
    
    // --- Server Actions Permissions ---
    // These functions check if a server action is allowed to perform a write.
    // They are meant to be 'true' because the actions run with admin-like privileges
    // and the core logic is in the server-side TypeScript code, not in the rules.
    function isServerAction() {
      // In a real production environment, this would be more secure,
      // perhaps by checking a custom token claim. For this context, we assume
      // all writes not from a client are from our trusted server actions.
      return true;
    }

    // --- Collections ---

    match /users/{userId} {
      // Admins can see all users. Any authenticated user can see a single user's profile.
      allow list: if isAdmin();
      allow get: if isAuthenticated();
      
      // A user can create their own document.
      allow create: if isOwner(userId);

      // Admins can update any field. A user can only update their own non-critical fields.
      allow update: if isAdmin() || (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
        'displayName', 'photoURL', 'lastActive', 'isOnline', 'currentGame', 
        'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'toursCompleted',
        'friends', 'friendRequestsSent', 'friendRequestsReceived'
      ]));

      // Only super admins can delete a user.
      allow delete: if isSuperAdmin();
      
      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow write: if false; // Server only
      }
    }

    // Admins can view these lists, but only server actions can create/update them.
    match /transactions/{transactionId} { allow get, list: if isOwner(resource.data.userId) || isFinanceStaff(); allow write: if false; }
    match /activityLogs/{logId} { allow read, write: if false; }
    match /fraudAlerts/{alertId} { allow read, list: if isAdmin(); allow write: if false; }
    match /userRewards/{userId} { allow get: if isOwner(userId); allow write: if false; }

    // Admins can read/write global stats for maintenance. Server actions also write here.
    match /systemStats/{docId} { allow read: if isAdmin(); allow write: if isServerAction(); }

    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // Users create requests, but only staff can update them (via server actions).
    match /addFundRequests/{requestId} {
      allow get, list: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }

    match /withdrawalRequests/{requestId} {
      allow get, list: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }
    
    match /supportTickets/{ticketId} {
      allow get, list: if isOwner(resource.data.userId) || isSupportStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) || isSupportStaff(); // User can add messages
      allow delete: if false;
    }
    
    match /tournaments/{tournamentId} {
      allow read, list: if isAuthenticated();
      allow create, update, delete: if isAdmin();
        
      match /participants/{userId} {
        allow read, list: if isAuthenticated();
        allow create: if isOwner(userId); // Users can join
        allow update, delete: if false; // Server updates scores
      }
    }
  }
}
