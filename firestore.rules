rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Checks if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Gets the user's role from their document. Returns 'player' if not found.
    function getRole() {
      // Use request.auth.uid which is guaranteed to be present if isAuthenticated() is true.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Checks if the user has an 'admin' or 'super-admin' role.
    function isAdmin() {
      let role = getRole();
      return isAuthenticated() && (role == 'admin' || role == 'super-admin');
    }

    // Checks if the user has a 'finance-staff' role or higher.
    function isFinanceStaff() {
      let role = getRole();
      return isAuthenticated() && (role == 'finance-staff' || isAdmin());
    }

    // Checks if the user has a 'support-staff' role or higher.
    function isSupportStaff() {
      let role = getRole();
      return isAuthenticated() && (role == 'support-staff' || isAdmin());
    }

    // --- Collection Rules ---

    // USERS collection
    match /users/{userId} {
      // Allow user to create their own document on signup.
      allow create: if isOwner(userId);
      // Allow user to read their own data. Admins can read any user's data.
      allow get, list: if isOwner(userId) || isAdmin();
      // Allow user to update their own data. Admins can update any user's data.
      allow update: if isOwner(userId) || isAdmin();
      // Only admins can delete users.
      allow delete: if isAdmin();
    }
    
    // Notifications sub-collection within users
    match /users/{userId}/notifications/{notificationId} {
        allow read, update, delete: if isOwner(userId);
        // Notifications are created by the system/admins, not directly by users.
        allow create: if isAdmin(); 
    }

    // APP CONFIGURATION collection
    match /appConfiguration/{docId} {
      // Anyone can read app settings.
      allow read: if true;
      // Only admins can write/update app settings.
      allow write: if isAdmin();
    }
    
    // GLOBAL STATS collection
    match /systemStats/{docId} {
      allow read: if true;
      allow write: if isAdmin(); // Only admins/server can update stats
    }
    
    // TRANSACTIONS collection
    match /transactions/{transactionId} {
      // Users can create their own transactions (server-side). Admins can also create.
      allow create: if isAuthenticated();
      // Users can only read their own transactions. Finance staff can read all.
      allow read, list: if isFinanceStaff() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      // No one can update/delete transactions to maintain audit trail.
      allow update, delete: if false;
    }

    // ADD FUND REQUESTS collection
    match /addFundRequests/{requestId} {
      // Users can create their own requests.
      allow create: if isAuthenticated();
      // Users can read their own requests. Finance staff can read all.
      allow read, list: if isFinanceStaff() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      // Only finance staff can update (approve/reject) requests.
      allow update: if isFinanceStaff();
      // Only admins can delete.
      allow delete: if isAdmin();
    }

    // WITHDRAWAL REQUESTS collection
    match /withdrawalRequests/{requestId} {
      // Users can create their own requests.
      allow create: if isAuthenticated();
      // Users can read their own requests. Finance staff can read all.
      allow read, list: if isFinanceStaff() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      // Only finance staff can update (approve/reject) requests.
      allow update: if isFinanceStaff();
      // Only admins can delete.
      allow delete: if isAdmin();
    }

    // SUPPORT TICKETS collection
    match /supportTickets/{ticketId} {
      // Users can create their own tickets.
      allow create: if isAuthenticated();
      // Users can read and update (add messages to) their own tickets. Support staff can manage all.
      allow read, update, list: if isSupportStaff() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      // Only admins can delete.
      allow delete: if isAdmin();
    }

    // USER REWARDS collection
    match /userRewards/{userId} {
      // User reward data is created on signup.
      allow create: if isOwner(userId);
      // Users can only read/update their own reward data.
      allow read, update: if isOwner(userId);
      // Admins can read any reward data for support purposes.
      allow get, list: if isAdmin();
    }

    // TOURNAMENTS collection
    match /tournaments/{tournamentId} {
      // Anyone can read tournament details.
      allow read, list: if true;
      // Only admins can create, update, or delete tournaments.
      allow write: if isAdmin();
      
      // Participants sub-collection
      match /participants/{userId} {
        // Users can join a tournament (create their own participant doc).
        allow create: if isOwner(userId);
        // Anyone can read participant data (for leaderboards).
        allow read, list: if true;
        // Only admins can update scores or delete participants.
        allow update, delete: if isAdmin();
      }
    }
  }
}
