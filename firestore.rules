
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      // It checks the 'isAdmin' field on the user's own document in the 'users' collection.
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // READ: 
      // - A user can fetch their own document (e.g., for their profile).
      // - An admin can fetch any user's document.
      allow get: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // - Any authenticated user can query the users collection (for the leaderboard).
      allow list: if request.auth != null;
      
      // UPDATE: A user can update their own data, and an admin can update anyone's data.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // CREATE: An authenticated user can create their own user document upon sign-up.
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'transactions' collection
    match /transactions/{transactionId} {
      // READ (get and list):
      // - A user can read transactions where their userId matches.
      // - An admin can read all transactions.
      // This single rule allows users to query their own history and admins to see everything.
      allow read: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
      
      // CREATE: A user can create a transaction record for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Rules for 'withdrawalRequests' collection
    match /withdrawalRequests/{requestId} {
      // CREATE: A user can create their own withdrawal request.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // READ: An admin can read any request. A user can read their own request to check status.
      allow read: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
      
      // WRITE/DELETE: Only an admin can update or delete requests.
      allow write, delete: if isAdmin();
    }
    
    // Rules for 'addFundRequests' collection
    match /addFundRequests/{requestId} {
      // CREATE: A user can create their own fund request.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // READ: An admin can read any request. A user can read their own request to check status.
      allow read: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
      
      // WRITE/DELETE: Only an admin can update or delete requests.
      allow write, delete: if isAdmin();
    }

    // Rules for 'appConfiguration' collection
    match /appConfiguration/{docId} {
      // READ: Any authenticated user can read the app's settings.
      allow read: if request.auth != null;
      // WRITE: Only an admin can change the app's settings.
      allow write: if isAdmin();
    }
  }
}
