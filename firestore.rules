
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function getMyData() {
      return getUserData(request.auth.uid);
    }
    
    function getMyRole() {
      // Use ?. to prevent error if role doesn't exist yet on a new document
      return getMyData().role;
    }

    function isSuperAdmin() {
      return isSignedIn() && getMyRole() == 'super-admin';
    }

    function isAdmin() {
      return isSignedIn() && getMyRole() in ['admin', 'super-admin'];
    }

    function isFinanceStaff() {
      return isSignedIn() && getMyRole() in ['finance-staff', 'admin', 'super-admin'];
    }
    
    function isSupportStaff() {
      return isSignedIn() && getMyRole() in ['support-staff', 'admin', 'super-admin'];
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      
      // A user can create their own document upon signup.
      allow create: if isOwner(userId);

      // Defines which fields a user is allowed to update on their own document.
      function isUpdatingOwnSafeFields() {
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        let safeFields = ['displayName', 'photoURL', 'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'toursCompleted', 'lastActive', 'isOnline', 'currentGame'];
        return isOwner(userId) && changedKeys.hasOnly(safeFields);
      }
      
      // Defines which fields an admin can update on any user's document.
      function isAdminUpdatingUser() {
        let adminUpdatableFields = ['role', 'isBlocked', 'manualWinRateOverride', 'tags', 'balances', 'spinsAvailable'];
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        return isAdmin() && changedKeys.hasOnly(adminUpdatableFields);
      }
      
      // This rule is specifically for the tournament joining transaction, which must be performed by the user.
      function isJoiningTournament() {
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        // This transaction ONLY updates one of the balance fields.
        // We verify it's a decrement by checking the new value against the old one.
        // This is a simplified check; the server action ensures the amount is correct.
        return isOwner(userId) 
                && changedKeys.size() == 1
                && changedKeys[0].startsWith('balances.');
      }
      
      allow update: if isUpdatingOwnSafeFields() || isAdminUpdatingUser() || isJoiningTournament();
                     
      allow delete: if isSuperAdmin();

      match /notifications/{notificationId} {
        allow read, update: if isOwner(userId);
        allow create, delete: if false;
      }
    }
    
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff();
      // Transactions are server-authoritative. Clients cannot create, update, or delete them.
      allow write: if false;
    }

    match /withdrawalRequests/{requestId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      // Status updates are server-authoritative.
      allow update, delete: if false;
    }
    
    match /addFundRequests/{requestId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      // Status updates are server-authoritative.
      allow update, delete: if false;
    }
    
    match /supportTickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isSupportStaff();
      // User must be the owner and the author of the first message.
      allow create: if isOwner(request.resource.data.userId) 
                     && request.resource.data.messages[0].senderId == request.auth.uid;
      // User or support staff can add messages.
      allow update: if (isOwner(resource.data.userId) || isSupportStaff());
    }

    match /tournaments/{tournamentId} {
        allow read: if isSignedIn();
        allow create, delete: if isSuperAdmin();

        function isJoining() {
          // This rule validates that the user is only adding their own UID to the participants array.
          return isSignedIn() 
                 && request.resource.data.participants.size() == resource.data.participants.size() + 1
                 && request.auth.uid in request.resource.data.participants;
        }

        // Allow SuperAdmins to make any change, or a signed-in user to join.
        allow update: if isSuperAdmin() || isJoining();

        match /participants/{userId} {
            allow read: if isSignedIn();
            // A user can create their own participant document when joining.
            allow create: if isOwner(userId);
            // Score and other updates must be server-authoritative.
            allow update, delete: if false;
        }
    }

    // Default rule to deny access to any path not explicitly defined.
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
