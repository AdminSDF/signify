rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getRequestingUserRole() {
      if (!isAuthenticated()) { return 'player'; }
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isSuperAdmin() {
      return isAuthenticated() && getRequestingUserRole() == 'super-admin';
    }

    function isAdmin() {
      let role = getRequestingUserRole();
      return isAuthenticated() && (role == 'admin' || role == 'super-admin');
    }
    
    function isSupportStaff() {
      let role = getRequestingUserRole();
      return isAuthenticated() && (role == 'support-staff' || isAdmin());
    }

    function isFinanceStaff() {
      let role = getRequestingUserRole();
      return isAuthenticated() && (role == 'finance-staff' || isAdmin());
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow get, list: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isAdmin() || (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'displayName', 'photoURL', 'lastActive', 'isOnline', 'currentGame', 
          'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'toursCompleted'
      ]));
      allow delete: if isSuperAdmin();

      match /notifications/{notificationId} {
        allow read, list: if isOwner(userId);
        allow create, update, delete: if false; // Server-side only
      }
    }

    // --- App Configuration & System Stats ---
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    match /systemStats/{docId} {
      allow read, write: if isFinanceStaff();
    }

    // --- Financial Collections ---
    match /transactions/{transactionId} {
      allow get: if isOwner(resource.data.userId) || isFinanceStaff();
      allow list: if isFinanceStaff();
      allow create, update, delete: if false; // Server-side only
    }

    match /addFundRequests/{requestId} {
      allow get: if isOwner(resource.data.userId) || isFinanceStaff();
      allow list: if isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff();
      allow delete: if false;
    }

    match /withdrawalRequests/{requestId} {
      allow get: if isOwner(resource.data.userId) || isFinanceStaff();
      allow list: if isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff();
      allow delete: if false;
    }
    
    // --- Support Tickets ---
    match /supportTickets/{ticketId} {
      allow get: if isOwner(resource.data.userId) || isSupportStaff();
      allow list: if isSupportStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) || isSupportStaff();
      allow delete: if false;
    }
    
    // --- Rewards & Tournaments ---
    match /userRewards/{userId} {
      allow get: if isOwner(userId);
      allow create, update, delete: if false; // Server-side only
    }
    
    match /tournaments/{tournamentId} {
        allow read, list: if isAuthenticated();
        allow create, delete: if isAdmin();
        
        // Allow updating only the participants array by adding self
        allow update: if isAuthenticated() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']) &&
                       request.resource.data.participants == resource.data.participants.concat([request.auth.uid]);
        
        match /participants/{userId} {
            allow read, list: if isAuthenticated();
            allow create: if isOwner(userId);
            allow update, delete: if isAdmin();
        }
    }
    
    // --- Admin-Only Collections ---
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false;
    }
    
    match /fraudAlerts/{alertId} {
      allow read, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }
  }
}
