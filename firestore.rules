rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user is authenticated and has the isAdmin flag in their user document
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // --- User Profile Update Logic ---
    function canUpdateOwnProfile(newData, oldData) {
        // Fields a user is allowed to change on their own profile.
        // Importantly, this now includes friend-related arrays.
        let allowedUserFields = [
          "displayName", "photoURL", "lastActive", "isOnline", "currentGame", 
          "upiIdForWithdrawal", "bankDetailsForWithdrawal", "toursCompleted", 
          "tags", "friends", "friendRequestsSent", "friendRequestsReceived"
        ];
        
        // Fields an admin can manually override, but a user cannot change for themselves.
        let adminOnlyFields = ["manualWinRateOverride", "isBlocked"];

        // Fields that should NEVER be changed by the client after creation.
        let criticalFieldsUnchanged = 
            newData.uid == oldData.uid &&
            newData.email == oldData.email &&
            newData.createdAt == oldData.createdAt &&
            newData.referralCode == oldData.referralCode &&
            newData.balances == oldData.balances && // Balances must only be changed by trusted server logic/admin
            newData.isAdmin == oldData.isAdmin; // Users can't make themselves admin

        return request.resource.data.diff(oldData).affectedKeys().hasOnly(allowedUserFields) && criticalFieldsUnchanged;
    }
    
    // --- Collection Rules ---

    // USERS
    match /users/{userId} {
      // Allow any logged-in user to read public profile data (needed for friends list)
      allow get: if isAuthenticated();
      
      // Prevent scraping the entire user list
      allow list: if false;

      // Allow a user to create their own document
      allow create: if isOwner(userId);

      // Allow a user to update their own allowed fields, or allow an admin to update anything.
      allow update: if (isOwner(userId) && canUpdateOwnProfile(request.resource.data, resource.data)) || isAdmin();
      
      // Allow a user to be deleted only by an admin
      allow delete: if isAdmin();

      // Notifications are a sub-collection of users
      match /notifications/{notificationId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // TRANSACTIONS
    match /transactions/{transactionId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, list: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isAdmin();
      allow update, delete: if isAdmin();
    }
    
    // WITHDRAWAL & ADD FUND REQUESTS
    match /withdrawalRequests/{reqId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, list: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isAdmin();
      allow update: if isAdmin();
    }

    match /addFundRequests/{reqId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, list: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isAdmin();
      allow update: if isAdmin();
    }

    // SUPPORT TICKETS
    match /supportTickets/{ticketId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, list: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isAdmin();
      allow update: if isAdmin();
    }
    
    // USER REWARDS
    match /userRewards/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // TOURNAMENTS
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    match /userTournaments/{userTournamentId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow list: if isAuthenticated(); // Allow users to list their own tournament participation
    }

    // LOGS, ALERTS & STATS (Admin or server-side only)
    match /activityLogs/{logId} {
      allow create: if isAuthenticated();
      allow read: if isAdmin();
    }

    match /fraudAlerts/{alertId} {
      allow read, create, update: if isAdmin();
    }

    match /systemStats/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // APP CONFIGURATION (Readable by all, writable by admin)
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
