
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Safely gets a user's role. Returns 'player' if the user document doesn't exist yet (e.g., during signup).
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function userExists(userId) {
        return exists(/databases/$(database)/documents/users/$(userId));
    }

    function isSuperAdmin() {
      return isSignedIn() && userExists(request.auth.uid) && getUserRole(request.auth.uid) == 'super-admin';
    }

    function isAdmin() {
      let userRole = getUserRole(request.auth.uid);
      return isSignedIn() && userExists(request.auth.uid) && (userRole == 'admin' || userRole == 'super-admin');
    }
    
    function isFinanceStaff() {
      let userRole = getUserRole(request.auth.uid);
      return isSignedIn() && userExists(request.auth.uid) && (userRole == 'finance-staff' || isAdmin());
    }
    
    function isSupportStaff() {
      let userRole = getUserRole(request.auth.uid);
      return isSignedIn() && userExists(request.auth.uid) && (userRole == 'support-staff' || isAdmin());
    }

    // --- Collection Rules ---

    // App Configuration: Public read, Super-Admin write.
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // System Stats: Admin can do anything.
    match /systemStats/{docId} {
      allow read, write: if isAdmin();
    }
    
    // Users Collection
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isAdmin();
      // Allow a user to create their own document. This is critical for signup.
      allow create: if isOwner(userId); 
      allow update: if isOwner(userId) || isSuperAdmin();
      allow delete: if isSuperAdmin();

      // User's own notifications
      match /notifications/{notificationId} {
        allow read, write, delete: if isOwner(userId);
      }
    }
    
    // Transactions: Server actions (running as admin) create these. Owner/staff can read.
    match /transactions/{transactionId} {
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || isFinanceStaff());
      allow list: if isFinanceStaff();
      allow create: if isFinanceStaff(); // Server actions will have at least finance-staff role
      allow update, delete: if isSuperAdmin();
    }

    // Add Fund Requests
    match /addFundRequests/{requestId} {
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || isFinanceStaff());
      allow list: if isFinanceStaff();
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff(); // Server actions
      allow delete: if isSuperAdmin();
    }
    
    // Withdrawal Requests
    match /withdrawalRequests/{requestId} {
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || isFinanceStaff());
      allow list: if isFinanceStaff();
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff(); // Server actions
      allow delete: if isSuperAdmin();
    }
    
    // Support Tickets
    match /supportTickets/{ticketId} {
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || isSupportStaff());
      allow list: if isSupportStaff();
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && (isOwner(resource.data.userId) || isSupportStaff());
      allow delete: if isSuperAdmin();
    }
    
    // Tournaments: Public read, super-admin write.
    match /tournaments/{tournamentId} {
      allow read, list: if true;
      allow create, update, delete: if isSuperAdmin();
      
      // Tournament Participants Sub-collection
      match /participants/{participantId} {
        allow create: if isOwner(participantId); // User can join
        allow read, list: if true;
        allow update, delete: if isAdmin(); // Server actions update scores
      }
    }

    // User Rewards
    match /userRewards/{userId} {
      allow get: if isOwner(userId);
      // Allow user to create their own reward doc during signup
      allow create: if isOwner(userId);
      allow update: if isAdmin(); // Server actions handle claims
    }
    
    // Server-only collections. Assume server runs with admin privileges.
    match /activityLogs/{logId} {
      allow read, create, update, delete: if isAdmin();
    }
    
    match /fraudAlerts/{alertId} {
      allow read, create, update, delete: if isAdmin();
    }
  }
}
