rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    // Checks if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Safely gets the role of the current user. Defaults to 'player' if no doc exists.
    function getUserRole(userId) {
      // Use get() to read a document from a different path.
      // Use exists() to handle the case where the user document has not been created yet (e.g., during signup).
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function getRole() {
       return getUserRole(request.auth.uid);
    }

    // Role-based check functions
    function isSuperAdmin() {
      return isSignedIn() && getRole() == 'super-admin';
    }
    
    function isAdmin() {
      return isSignedIn() && (getRole() == 'admin' || isSuperAdmin());
    }

    function isFinanceStaff() {
        return isSignedIn() && (getRole() == 'finance-staff' || isAdmin());
    }

    function isSupportStaff() {
        return isSignedIn() && (getRole() == 'support-staff' || isAdmin());
    }

    // Checks if the user is the owner of the document.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // --- Collection Rules ---

    // USERS Collection
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isOwner(userId); // A user can create their own document.
      allow update: if isOwner(userId) || isSuperAdmin(); // User can update their own data, only super-admin can change roles/block.
      allow delete: if false; // Nobody can delete user documents.

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // APP CONFIGURATION
    match /appConfiguration/main {
      allow read: if true; // Everyone can read app settings
      allow write: if isSuperAdmin();
    }
    
    // SYSTEM STATS
    match /systemStats/global {
       allow read, write: if isFinanceStaff(); // Allow finance staff to read and write (create if not exists)
    }

    // ADD FUND REQUESTS
    match /addFundRequests/{requestId} {
      allow read: if isSignedIn() && (isOwner(request.resource.data.userId) || isFinanceStaff());
      allow list: if isFinanceStaff();
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff();
      allow delete: if false;
    }
    
    // WITHDRAWAL REQUESTS
    match /withdrawalRequests/{requestId} {
       allow read: if isSignedIn() && (isOwner(request.resource.data.userId) || isFinanceStaff());
       allow list: if isFinanceStaff();
       allow create: if isSignedIn() && isOwner(request.resource.data.userId);
       allow update: if isFinanceStaff();
       allow delete: if false;
    }
    
    // TRANSACTIONS
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && (isOwner(request.resource.data.userId) || isFinanceStaff());
      allow list: if isFinanceStaff();
      allow create: if true; // Created by server-side actions (actions are trusted)
      allow update, delete: if false;
    }
    
    // SUPPORT TICKETS
    match /supportTickets/{ticketId} {
        allow read: if isSignedIn() && (isOwner(request.resource.data.userId) || isSupportStaff());
        allow list: if isSupportStaff();
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow update: if isSignedIn() && (isOwner(request.resource.data.userId) || isSupportStaff());
        allow delete: if false;
    }
    
    // USER REWARDS
    match /userRewards/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId); // Allow user to create their own reward doc on signup
      allow update: if isOwner(userId); // Allow user to update for claims
    }
    
    // TOURNAMENTS
    match /tournaments/{tournamentId} {
      allow read, list: if true; // Everyone can see tournaments
      allow create, update: if isAdmin(); // Only admins can create/update tournaments
      
      // Participants subcollection
      match /participants/{userId} {
        allow read: if true;
        allow create: if isOwner(userId); // Users can join
        allow update: if isAdmin(); // Only admins can update score/distribute prizes
      }
    }
    
    // ACTIVITY LOGS
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if true; // Logged by server actions
      allow write, delete: if false;
    }
    
    // FRAUD ALERTS
    match /fraudAlerts/{alertId} {
        allow read: if isAdmin();
        allow create, write, delete: if false; // Only created by backend logic
    }
  }
}
