rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isUserAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isUpdatingOwnSafeFields() {
      // These are fields a user is allowed to change about themselves.
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'displayName', 'photoURL', 'lastActive', 'isOnline', 'currentGame',
          'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'toursCompleted'
      ]);
    }
    
    function isUpdatingFriendLists() {
        // These are fields related to social features.
        // This rule allows updates only to the social keys. It's a simplification.
        // A more secure implementation would use Cloud Functions.
        return request.resource.data.diff(resource.data).affectedKeys().hasAny(['friends', 'friendRequestsSent', 'friendRequestsReceived']) &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends', 'friendRequestsSent', 'friendRequestsReceived']);
    }

    // --- Main Rules ---
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);

      // A user can update their own safe fields.
      // Or anyone can update friend-related lists (this is a simplified, less secure rule to fix the syntax).
      allow update: if isSignedIn() && (
        (isOwner(userId) && isUpdatingOwnSafeFields()) ||
        isUpdatingFriendLists()
      );

      // --- Notifications Subcollection ---
      match /notifications/{notificationId} {
        allow read, update: if isOwner(userId); // Can read and mark as read.
        allow create: if isSignedIn(); // Allow server/others to create notifications.
        allow delete: if false; // Don't allow deletion.
      }
    }
    
    // --- Other Collections Rules ---
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isSignedIn(); // Server-side logic will enforce correctness.
      allow update, delete: if false;
    }

    match /withdrawalRequests/{reqId} {
      allow read: if isOwner(resource.data.userId) || isUserAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isUserAdmin();
      allow delete: if false;
    }

    match /addFundRequests/{reqId} {
      allow read: if isOwner(resource.data.userId) || isUserAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isUserAdmin();
      allow delete: if false;
    }

    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isUserAdmin();
    }
    
    match /supportTickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isUserAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isUserAdmin();
      allow delete: if false;
    }
    
    match /userRewards/{userId} {
      allow read: if isOwner(userId);
      allow create, update: if isSignedIn();
    }
    
    match /tournaments/{tourneyId} {
      allow read: if true;
      allow create, update: if isUserAdmin();
    }
    
    match /userTournaments/{userTourneyId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
    }
  }
}
