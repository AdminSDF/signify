
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Gets the role of the currently authenticated user.
    function getRole() {
      // Use a path variable to avoid escaping issues with request.auth.uid
      let uid = request.auth.uid;
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }

    function isSuperAdmin() {
      return isSignedIn() && getRole() == 'super-admin';
    }

    function isAdmin() {
      return isSignedIn() && (getRole() == 'admin' || isSuperAdmin());
    }

    function isFinanceStaff() {
        return isSignedIn() && (getRole() == 'finance-staff' || isAdmin());
    }

    function isSupportStaff() {
        return isSignedIn() && (getRole() == 'support-staff' || isAdmin());
    }

    // --- Users Collection ---
    match /users/{userId} {
      // Admins can read any user document. Super Admins can also write.
      // Users can read their own document.
      allow read: if isAdmin() || isOwner(userId);
      
      // SuperAdmins can write anything.
      allow write: if isSuperAdmin();

      // Users can create their own document.
      allow create: if isOwner(userId);
      
      // Users can update a limited set of their own, non-critical fields.
      // Balances, roles, spins, etc., must be updated by server actions.
      allow update: if isOwner(userId) &&
        // Ensure no critical fields are being changed by the user.
        request.resource.data.balances == resource.data.balances &&
        request.resource.data.role == resource.data.role &&
        request.resource.data.spinsAvailable == resource.data.spinsAvailable &&
        request.resource.data.totalWinnings == resource.data.totalWinnings &&
        // List of fields the user IS allowed to change.
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly([
            'displayName', 'photoURL', 'lastActive', 'isOnline',
            'currentGame', 'upiIdForWithdrawal', 'bankDetailsForWithdrawal',
            'toursCompleted', 'friendRequestsSent', 'friendRequestsReceived', 'friends'
          ]);
    }
    
    // --- Transactions Collection ---
    // Users can only read their own transactions.
    // Finance staff can read all transactions.
    // Transactions are created by server actions, so no direct client create.
    match /transactions/{transactionId} {
        allow get: if isOwner(resource.data.userId) || isFinanceStaff();
        allow list: if isFinanceStaff();
        allow write: if false; // Only server can create/update/delete
    }
    
    // --- Withdrawal & Add Fund Requests ---
    match /{collection}/{requestId} where collection == 'withdrawalRequests' || collection == 'addFundRequests' {
        // Users can create their own requests.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        
        // Users can read their own requests. Finance staff can read any.
        allow get: if isOwner(resource.data.userId) || isFinanceStaff();
        allow list: if isFinanceStaff();
        
        // No client-side updates/deletes allowed. Handled by server actions.
        allow update, delete: if false;
    }

    // --- App Configuration ---
    match /appConfiguration/{docId} {
      // Anyone can read the configuration.
      allow read: if true;
      // Only super admins can write the configuration.
      allow write: if isSuperAdmin();
    }
    
    // --- Notifications (Subcollection of Users) ---
    match /users/{userId}/notifications/{notificationId} {
        // User can list/read their own notifications.
        allow read: if isOwner(userId);
        // User can update their own notification (to mark as read).
        allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
        // Only server creates/deletes notifications.
        allow create, delete: if false;
    }

    // --- Support Tickets ---
    match /supportTickets/{ticketId} {
      // Support staff can list/read any ticket.
      allow get: if isSupportStaff() || isOwner(resource.data.userId);
      allow list: if isSupportStaff();
      
      // Users can create their own tickets.
      allow create: if isOwner(request.resource.data.userId);

      // Users can update their own tickets ONLY by adding a message.
      // Admins/Support can update any field.
      allow update: if isSupportStaff() || 
                      (isOwner(resource.data.userId) &&
                      request.resource.data.messages.size() == resource.data.messages.size() + 1 &&
                      request.resource.data.messages[request.resource.data.messages.size() - 1].senderId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['messages', 'lastUpdatedAt', 'status']) &&
                      request.resource.data.status == 'customer-reply');
    }
    
    // --- System Logs & Stats ---
    // These should only be written by the server. No client access except for admins.
    match /activityLogs/{logId} { allow read, write: if isAdmin(); }
    match /fraudAlerts/{alertId} { allow read: if isAdmin(); allow write: if false; }
    match /systemStats/{statId} { allow read: if isAdmin(); allow write: if false; }
    match /userRewards/{userId} { allow get: if isOwner(userId); allow write: if false; }

    // --- Tournaments ---
    match /tournaments/{tournamentId} {
      // Anyone can read tournament details.
      allow read: if true;
      
      // Only admins can create, update, or delete tournaments directly.
      // User joining is handled by a server action, which has full access.
      allow write: if isAdmin();
      
      // Tournament Participants Sub-collection
      match /participants/{userId} {
        // Anyone can read the participants list to see the leaderboard.
        allow read: if true;
        
        // No client-side writes. Server action handles creation/updates.
        allow write: if false;
      }
    }
  }
}
