
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if the user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // --- USER DATA ---
    match /users/{userId} {
      // Any signed-in user can read another user's public data
      allow read: if isSignedIn();
      // A user can update their own profile, but not critical fields like isAdmin or balances.
      // Admins can update anything.
      allow update: if (request.auth.uid == userId && !("isAdmin" in request.resource.data) && !("balances" in request.resource.data)) || isAdmin();
      // User creation is handled by server-side logic (auth functions). Deletion is admin-only.
      allow create: if isSignedIn();
      allow delete: if isAdmin();
    }
    
    // Notifications are a subcollection of users
    match /users/{userId}/notifications/{notificationId} {
      // A user can read and update (mark as read) their own notifications.
      allow read, update: if request.auth.uid == userId;
      // Notifications are created by the server/backend logic.
      allow create, delete: if false; 
    }

    // --- APP CONFIGURATION ---
    match /appConfiguration/main {
      // Any client can read the app configuration.
      allow read: if true;
      // Only admins can write/update the configuration.
      allow write: if isAdmin();
    }

    // --- TRANSACTIONS & REQUESTS ---
    match /transactions/{transactionId} {
      // Users can only read their own transactions. Admins can read all.
      allow read: if (isSignedIn() && request.auth.uid == resource.data.userId) || isAdmin();
      // Transactions are immutable and created by the server logic.
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    match /withdrawalRequests/{requestId} {
      // A user can create their own request.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      // Users can read their own requests, admins can read any.
      allow read: if (isSignedIn() && request.auth.uid == resource.data.userId) || isAdmin();
      // Only admins can update (approve/reject) requests.
      allow update: if isAdmin();
      allow delete: if false;
    }

    match /addFundRequests/{requestId} {
      // A user can create their own request.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      // Users can read their own requests, admins can read any.
      allow read: if (isSignedIn() && request.auth.uid == resource.data.userId) || isAdmin();
      // Only admins can update (approve/reject) requests.
      allow update: if isAdmin();
      allow delete: if false;
    }
    
    // --- SUPPORT & LOGS ---
    match /supportTickets/{ticketId} {
      // A user can create their own ticket.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      // Admins can read/update any ticket.
      allow read, update: if isAdmin();
      allow delete: if false;
    }
    
    match /activityLogs/{logId} {
      // Created by server, cannot be read or written by clients.
      allow read, write: if false;
    }
    
    match /fraudAlerts/{alertId} {
      // Only admins can read, only server can write.
      allow read: if isAdmin();
      allow write: if false;
    }
    
    // --- REWARDS & TOURNAMENTS ---
    match /userRewards/{userId} {
      // A user can read and update their own reward data (for claiming).
      allow read, update: if request.auth.uid == userId;
      // Created on user signup.
      allow create: if request.auth.uid == userId;
      allow delete: if false;
    }

    match /tournaments/{tournamentId} {
      // Anyone can read tournament info.
      allow read: if true;
      // Only admins can create or modify tournaments.
      allow write: if isAdmin();
    }
    
    match /userTournaments/{userTournamentId} {
      // Anyone can read participant scores.
      allow read: if true;
      // A user can join a tournament (create their entry).
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      // Score updates should be handled server-side to prevent cheating.
      allow update: if false; 
      allow delete: if false;
    }
    
    // --- SYSTEM STATS ---
    match /systemStats/global {
      // Cannot be read or written by clients.
      allow read, write: if false;
    }
  }
}
