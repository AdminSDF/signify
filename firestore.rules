
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    // These functions make the rules easier to read and maintain.
    
    // Is the requesting user the owner of the document?
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Does the requesting user's document exist in the 'users' collection?
    function userExists() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Get the role of the requesting user.
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    // Check if the user has a 'super-admin' role.
    function isSuperAdmin() {
      return userExists() && getRole() == 'super-admin';
    }

    // Check if the user has an 'admin' or 'super-admin' role.
    function isAdmin() {
      return userExists() && (getRole() == 'admin' || getRole() == 'super-admin');
    }
    
    // Check if the user has a 'finance-staff' role or higher.
    function isFinanceStaff() {
      return userExists() && (getRole() in ['finance-staff', 'admin', 'super-admin']);
    }
    
    // Check if the user has a 'support-staff' role or higher.
    function isSupportStaff() {
      return userExists() && (getRole() in ['support-staff', 'admin', 'super-admin']);
    }

    // Check if the user is any type of staff member.
    function isStaff() {
        return userExists() && (getRole() in ['support-staff', 'finance-staff', 'admin', 'super-admin']);
    }

    // --- Collection Rules ---

    // Users Collection
    match /users/{userId} {
      // A new user can create their own profile.
      allow create: if isOwner(userId);
      
      // A user can read their own profile. Staff can read any profile.
      allow get: if isOwner(userId) || isStaff();

      // Admins can list all users for the admin panel.
      allow list: if isAdmin();
      
      // A user can update their own non-critical profile info. Super Admins can update anything.
      allow update: if (isOwner(userId) && request.resource.data.keys().hasOnly(['displayName', 'photoURL', 'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'isOnline', 'lastActive', 'currentGame', 'toursCompleted'])) || isSuperAdmin();

      // Nobody can delete users from the client.
      allow delete: if false;

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // App Configuration
    match /appConfiguration/main {
      // Anyone can read the app configuration.
      allow get: if true;
      // Only super-admins can write the configuration.
      allow write: if isSuperAdmin();
    }
    
    // System Statistics
    match /systemStats/global {
      // Staff can read the global stats document.
      allow get: if isStaff();
      // Allow staff to CREATE the document if it doesn't exist, but not update it from the client.
      // This is the key fix for the "could not load admin data" error.
      allow create: if isStaff();
      // Updates should only happen via server-side actions (transactions).
      allow update, delete: if false;
    }

    // Financial & Support Requests
    match /{collectionName}/{docId} 
      where collectionName in ['withdrawalRequests', 'addFundRequests', 'transactions', 'supportTickets', 'activityLogs', 'fraudAlerts'] {
      
      // Allow staff to list and get any document in these collections for the admin panel.
      allow list, get: if isStaff();
      
      // Specific creation rules are below. All client-side updates/deletes are disallowed.
      allow update, delete: if false; 
    }

    match /withdrawalRequests/{requestId} {
      // A user can create their own withdrawal request.
      allow create: if isOwner(request.resource.data.userId);
    }
    
    match /addFundRequests/{reqId} {
      // A user can create their own fund request.
      allow create: if isOwner(request.resource.data.userId);
    }
    
    match /supportTickets/{ticketId} {
      // A user can create their own support ticket.
      allow create: if isOwner(request.resource.data.userId);
      // A user can update their own ticket (add messages). Support staff can also update any ticket.
      allow update: if isOwner(request.resource.data.userId) || isSupportStaff();
    }

    // User Rewards
    match /userRewards/{userId} {
      // A user can only read their own reward data.
      allow read: if isOwner(userId);
      // Creation happens during sign-up. Updates happen via server action.
      allow create: if isOwner(userId);
      allow update, delete: if false;
    }

    // Tournaments
    match /tournaments/{tournamentId} {
      // Anyone can read tournament details.
      allow read: if true;
      // Only super-admins can create/update tournaments from the admin panel.
      allow write: if isSuperAdmin();

      match /participants/{userId} {
        // Anyone can read the list of participants.
        allow read: if true;
        // Joining (creating a participant doc) is handled by server-side actions, not client.
        allow create, update, delete: if false;
      }
    }
  }
}
