rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getRequestingUserData() {
      // Note: This function should only be called within a rule that has already checked isAuthenticated().
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isSuperAdmin() {
      return isAuthenticated() && getRequestingUserData().role == 'super-admin';
    }

    function isAdmin() {
      let userRole = getRequestingUserData().role;
      return isAuthenticated() && (userRole == 'admin' || userRole == 'super-admin');
    }
    
    function isSupportStaff() {
      let userRole = getRequestingUserData().role;
      return isAuthenticated() && (userRole == 'support-staff' || isAdmin());
    }

    function isFinanceStaff() {
      let userRole = getRequestingUserData().role;
      return isAuthenticated() && (userRole == 'finance-staff' || isAdmin());
    }

    // --- Collections Rules ---

    match /users/{userId} {
      allow list: if isAdmin();
      allow get: if isAuthenticated();
      
      allow create: if isOwner(userId);
      
      allow update: if isAdmin() || 
                     (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                        'displayName', 'photoURL', 'lastActive', 'isOnline', 'currentGame', 
                        'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'toursCompleted', 'friends',
                        'friendRequestsSent', 'friendRequestsReceived'
                      ]));
                          
      allow delete: if isSuperAdmin();

      match /notifications/{notificationId} {
        allow read, list: if isOwner(userId);
        allow create, update, delete: if false; 
      }
    }

    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    match /systemStats/{docId} {
      allow read, write: if false; // Server-side only via Admin SDK
    }

    match /transactions/{transactionId} {
      allow get: if isOwner(resource.data.userId) || isFinanceStaff();
      allow list: if isFinanceStaff();
      allow create, update, delete: if false; 
    }

    match /addFundRequests/{requestId} {
      allow get: if isOwner(resource.data.userId) || isFinanceStaff();
      allow list: if isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff(); 
      allow delete: if false;
    }

    match /withdrawalRequests/{requestId} {
      allow get: if isOwner(resource.data.userId) || isFinanceStaff();
      allow list: if isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff();
      allow delete: if false;
    }
    
    match /supportTickets/{ticketId} {
      allow get, list: if isOwner(resource.data.userId) || isSupportStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) || isSupportStaff();
      allow delete: if false;
    }
    
    match /userRewards/{userId} {
      allow get: if isOwner(userId);
      allow create, update, delete: if false;
    }
    
    match /tournaments/{tournamentId} {
        allow read, list: if isAuthenticated();
        allow create, update, delete: if isAdmin();
        
        match /participants/{userId} {
            allow read, list: if isAuthenticated();
            allow create: if isOwner(userId);
            allow update, delete: if isAdmin();
        }
    }
    
    match /activityLogs/{logId} {
      allow read, write: if false; 
    }
    
    match /fraudAlerts/{alertId} {
      allow read, list: if isAdmin();
      allow write: if false;
    }
  }
}