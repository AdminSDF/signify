
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      // Ensure the user document exists and isAdmin is true
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // Helper function to check if the request is coming from an authenticated user
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the document
    // Typically used in contexts where {userId} is part of the path
    function isOwner(docUserId) {
      return isAuthenticated() && request.auth.uid == docUserId;
    }

    // Users Collection
    match /users/{userId} {
      // Allow read of own document, or if requester is admin
      allow read: if isOwner(userId) || (isAuthenticated() && isAdmin(request.auth.uid));

      // Allow create if user is creating their own document and provides necessary fields
      allow create: if isOwner(userId)
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.balance is number
                    && request.resource.data.spinsAvailable is number
                    && request.resource.data.dailyPaidSpinsUsed is number
                    && request.resource.data.lastPaidSpinDate is string
                    && request.resource.data.totalWinnings is number
                    && request.resource.data.totalSpinsPlayed is number
                    // User cannot make themselves admin during creation unless explicitly allowed by other means
                    && (request.resource.data.isAdmin == false || request.resource.data.isAdmin == null);

      // Allow user to update their own non-critical fields. Admins can update anything.
      allow update: if (isAuthenticated() && isAdmin(request.auth.uid)) ||
                     (isOwner(userId) &&
                       // User can update specific fields
                       request.resource.data.keys().hasOnly([
                         'uid', 'email', 'displayName', 'photoURL', 'createdAt', 'balance', 'spinsAvailable',
                         'dailyPaidSpinsUsed', 'lastPaidSpinDate', 'totalWinnings', 'totalSpinsPlayed', 'isAdmin', 'lastLogin',
                         'upiIdForWithdrawal', 'bankDetailsForWithdrawal'
                       ]) &&
                       // User cannot change their UID, email, createdAt, isAdmin status by themselves
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       request.resource.data.isAdmin == resource.data.isAdmin &&
                       // Balance and spinsAvailable should ideally be updated by server logic or admin only.
                       // For now, allowing user to update these if they are passed, but this is a security risk from client.
                       // For fields like dailyPaidSpinsUsed, lastPaidSpinDate, totalWinnings, totalSpinsPlayed, lastLogin, upiIdForWithdrawal, bankDetailsForWithdrawal, photoURL, displayName:
                       (request.resource.data.lastLogin == request.time || request.resource.data.lastLogin == resource.data.lastLogin) &&
                       (request.resource.data.dailyPaidSpinsUsed is number || request.resource.data.dailyPaidSpinsUsed == resource.data.dailyPaidSpinsUsed) &&
                       (request.resource.data.lastPaidSpinDate is string || request.resource.data.lastPaidSpinDate == resource.data.lastPaidSpinDate) &&
                       (request.resource.data.totalWinnings is number || request.resource.data.totalWinnings == resource.data.totalWinnings) &&
                       (request.resource.data.totalSpinsPlayed is number || request.resource.data.totalSpinsPlayed == resource.data.totalSpinsPlayed) &&
                       (request.resource.data.balance == resource.data.balance) && // User cannot directly change balance
                       (request.resource.data.spinsAvailable == resource.data.spinsAvailable) // User cannot directly change spinsAvailable
                     );


      // Disallow client-side deletion of user documents
      allow delete: if false;
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      // Allow owner to read their transactions, or if requester is admin
      allow read: if (isAuthenticated() && request.auth.uid == resource.data.userId)
                   || (isAuthenticated() && isAdmin(request.auth.uid));

      // Allow authenticated user to create a transaction for themselves
      // IMPORTANT: For production, ensure this creation is secure, especially if it affects balances directly.
      // Ideally, balance-affecting logic is server-side (Cloud Functions).
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.date == request.time
                    && request.resource.data.amount is number
                    && request.resource.data.type is string && (request.resource.data.type == 'credit' || request.resource.data.type == 'debit')
                    && request.resource.data.description is string
                    && request.resource.data.status is string;

      // Disallow client-side updates or deletions of transactions
      allow update, delete: if false;
    }

    // Withdrawal Requests Collection
    match /withdrawalRequests/{requestId} {
      // Allow owner to read their requests, or if requester is admin
      allow read: if (isAuthenticated() && request.auth.uid == resource.data.userId)
                   || (isAuthenticated() && isAdmin(request.auth.uid));

      // Allow authenticated user to create a withdrawal request for themselves
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.userEmail == request.auth.token.email
                    && request.resource.data.requestDate == request.time
                    && request.resource.data.status == "pending"
                    && request.resource.data.amount is number && request.resource.data.amount > 0
                    && request.resource.data.paymentMethod is string && (request.resource.data.paymentMethod == 'upi' || request.resource.data.paymentMethod == 'bank')
                    && (request.resource.data.paymentMethod == 'upi' ? (request.resource.data.upiId is string && request.resource.data.upiId.size() > 3) : true)
                    && (request.resource.data.paymentMethod == 'bank' ?
                          (request.resource.data.bankDetails.accountHolderName is string && request.resource.data.bankDetails.accountHolderName.size() > 0
                           && request.resource.data.bankDetails.accountNumber is string && request.resource.data.bankDetails.accountNumber.size() > 0
                           && request.resource.data.bankDetails.ifscCode is string && request.resource.data.bankDetails.ifscCode.size() > 0)
                        : true
                       );

      // Only admin can update (e.g., status, adminNotes, processedDate, transactionId)
      allow update: if isAuthenticated() && isAdmin(request.auth.uid)
                    && request.resource.data.userId == resource.data.userId; // Prevent changing user ID

      // Disallow client-side deletion
      allow delete: if false;
    }

    // Add Fund Requests Collection
    match /addFundRequests/{requestId} {
      // Allow owner to read their requests, or if requester is admin
      allow read: if (isAuthenticated() && request.auth.uid == resource.data.userId)
                   || (isAuthenticated() && isAdmin(request.auth.uid));

      // Allow authenticated user to create an add fund request for themselves
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.userEmail == request.auth.token.email
                    && request.resource.data.requestDate == request.time
                    && request.resource.data.status == "pending"
                    && request.resource.data.amount is number && request.resource.data.amount > 0
                    && request.resource.data.paymentReference is string && request.resource.data.paymentReference.size() > 0;

      // Only admin can update (e.g., status, adminNotes, approvedDate, transactionId)
      allow update: if isAuthenticated() && isAdmin(request.auth.uid)
                    && request.resource.data.userId == resource.data.userId; // Prevent changing user ID

      // Disallow client-side deletion
      allow delete: if false;
    }

    // App Configuration (Global Settings & News)
    match /appConfiguration/{docId} {
      // Allow anyone to read the app configuration
      // The docId is expected to be 'main'
      allow read: if docId == 'main';

      // Only admins can write (create, update, delete) the app configuration
      allow write: if isAuthenticated() && isAdmin(request.auth.uid) && docId == 'main';
    }
  }
}

    