
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Use getAfter() to read the state of the document after the write operation.
    // This is crucial for checking roles during document creation or updates.
    function getUserData(userId) {
      return getAfter(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isSuperAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'super-admin';
    }

    function isAdmin() {
      if (!isSignedIn()) { return false; }
      let role = getUserData(request.auth.uid).role;
      return role == 'super-admin' || role == 'admin';
    }
    
    function isFinanceStaff() {
        if (!isSignedIn()) { return false; }
        let role = getUserData(request.auth.uid).role;
        return role == 'super-admin' || role == 'admin' || role == 'finance-staff';
    }

    function isSupportStaff() {
        if (!isSignedIn()) { return false; }
        let role = getUserData(request.auth.uid).role;
        return role == 'super-admin' || role == 'admin' || role == 'support-staff';
    }

    // --- Collection Rules ---

    match /users/{userId} {
      // Any signed-in user can read profiles for leaderboards, friend searches etc.
      allow get, list: if isSignedIn();
      
      // A user can only create their own document.
      allow create: if isOwner(userId);
      
      allow update: if
        // A user can update their own "safe" fields.
        // NOTE: This includes `balances` and `spinsAvailable` to allow client-side reward claims, which is a security trade-off.
        (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny([
            'uid', 'email', 'createdAt', 'isAdmin', 'isBlocked', 
            'totalWinnings', 'totalSpinsPlayed', 'totalWins', 'totalDeposited', 'totalWithdrawn',
            'referralCode', 'referralEarnings', 'referredBy', 'vipUntil'
            // `role` is intentionally left out, only Super Admin can change it.
        ])) ||
        // Super Admins can update any user's document (e.g., change roles, block users).
        isSuperAdmin();
    }

    match /userRewards/{userId} {
       // A user must be able to create/update their own rewards doc for daily claims.
       allow get, create, update: if isOwner(userId);
    }
    
    // Admins can manage these collections.
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin(); 
    }
    
    match /transactions/{transactionId} {
      // User can create their own transactions. Finance staff and above can read all.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, list: if isFinanceStaff() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow write: if false; // No direct edits
    }
    
    match /withdrawalRequests/{reqId} {
       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
       allow read, list, update: if isFinanceStaff() || (isSignedIn() && resource.data.userId == request.auth.uid);
    }
    
    match /addFundRequests/{reqId} {
       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
       allow read, list, update: if isFinanceStaff() || (isSignedIn() && resource.data.userId == request.auth.uid);
    }
    
    match /supportTickets/{ticketId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, list, update: if isSupportStaff() || (isSignedIn() && resource.data.userId == request.auth.uid);
    }

    match /users/{userId}/notifications/{notificationId} {
        allow read, create, update: if isOwner(userId);
        allow delete: if false;
    }
    
    match /tournaments/{tournamentId} {
        allow read: if isSignedIn();
        allow write: if isAdmin(); // Admins and Super Admins can create/update tournaments.
    }
    
    match /userTournaments/{userTournamentId} {
        // A user must be able to create their own entry when joining a tournament.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow read: if isSignedIn();
        allow write: if isAdmin(); // Admins can end tournaments and distribute prizes.
    }
    
    // Admins can read system logs for monitoring.
    match /activityLogs/{logId} { allow read, list: if isAdmin(); allow write: if false; }
    match /fraudAlerts/{alertId} { allow read, list: if isAdmin(); allow write: if false; }
    match /systemStats/{statId} { allow read: if isAdmin(); allow write: if false; }
  }
}
