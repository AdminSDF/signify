
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserRole() {
      // Safely get user's role from their document.
      // Use exists() to avoid errors for users not yet in Firestore or missing a role.
      if (isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid))) {
        // Use .get() to access a field that might not exist, providing a default value.
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('role', 'player');
      }
      return 'player';
    }
    
    function isSuperAdmin() {
      return getUserRole() == 'super-admin';
    }

    function isAdminOrSuperAdmin() {
      return getUserRole() in ['admin', 'super-admin'];
    }
    
    function isStaff() {
       return getUserRole() in ['support-staff', 'finance-staff', 'admin', 'super-admin'];
    }

    // --- Collection Rules ---

    match /users/{userId} {
      // Staff (admins, etc.) can read any user profile.
      // A regular user can only read their own profile.
      allow get: if isStaff() || request.auth.uid == userId;
      
      // Staff can list users for the admin panel.
      allow list: if isStaff();
      
      // A user can create their own document.
      allow create: if request.auth.uid == userId;
      
      // Update Logic:
      allow update: if 
        // 1. Super Admins can update any user's role.
        (isSuperAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role'])) ||
        
        // 2. Admins can update "safe" fields on any user (e.g. tags, manual win rate).
        (isAdminOrSuperAdmin() && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'balances', 'isBlocked', 'isAdmin'])) ||
        
        // 3. A user can update their own "safe" profile fields (like displayName, photoURL).
        (
          request.auth.uid == userId &&
          !request.resource.data.diff(resource.data).affectedKeys().hasAny([
            'uid', 'email', 'createdAt', 'balances', 'spinsAvailable', 'isAdmin', 'isBlocked', 'role',
            'totalWinnings', 'totalSpinsPlayed', 'totalWins', 'totalDeposited', 'totalWithdrawn',
            'referralCode', 'referralEarnings', 'referredBy', 'referrals', 'vipUntil',
            'friends', 'friendRequestsSent', 'friendRequestsReceived'
          ])
        ) ||

        // 4. ANY authenticated user can update ANY other user's friendship/referral lists.
        (
          isSignedIn() && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends', 'friendRequestsSent', 'friendRequestsReceived', 'referrals'])
        );
    }

    match /userRewards/{userId} {
       // A user must be able to update their own rewards doc for daily claims.
       allow get, create, update: if request.auth.uid == userId;
    }
    
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin(); // Only Super Admins can change app settings
    }
    
    match /{collection}/{docId} 
        where collection in ['transactions', 'withdrawalRequests', 'addFundRequests', 'supportTickets', 'activityLogs', 'fraudAlerts', 'userTournaments'] {
      // Staff can read/list any document in these collections.
      // Users can only read/list their own.
      allow list, read: if isStaff() || (isSignedIn() && resource.data.userId == request.auth.uid);
      
      // Users can create documents for themselves.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      // Only staff can update these documents (e.g. approve a request).
      allow update: if isStaff();
    }
    
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow create, update: if isAdminOrSuperAdmin();
    }

    match /users/{userId}/notifications/{notificationId} {
        allow read, list, create, update: if request.auth.uid == userId;
    }
    
    match /systemStats/{statId} { 
        allow read: if isStaff(); 
        allow write: if false; // Should be updated by server-side logic only
    }
  }
}
