rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }

    function getRequestingUserRole() {
      // Gracefully handle cases where the user document doesn't exist yet (e.g., during signup)
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) ? getUserData(request.auth.uid).data.role : 'player';
    }

    function isSuperAdmin() {
      return isSignedIn() && getRequestingUserRole() == 'super-admin';
    }

    function isAdmin() {
      return isSignedIn() && getRequestingUserRole() in ['admin', 'super-admin'];
    }

    function isFinanceStaff() {
      return isSignedIn() && getRequestingUserRole() in ['finance-staff', 'admin', 'super-admin'];
    }

    function isSupportStaff() {
      return isSignedIn() && getRequestingUserRole() in ['support-staff', 'admin', 'super-admin'];
    }

    // --- Collection Rules ---

    // USERS
    match /users/{userId} {
      allow read, list: if isSignedIn();
      allow create: if isOwner(userId);
      // Allow user to update their own profile, or Finance/Admin staff to update balances etc.
      allow update: if isOwner(userId) || isFinanceStaff();

      match /notifications/{notificationId} {
        allow read, update, list, create, delete: if isOwner(userId);
      }
    }

    // USER REWARDS
    match /userRewards/{userId} {
      allow read, update: if isOwner(userId);
      // Allow creation during user signup
      allow create: if isOwner(userId);
    }
    
    // APP CONFIGURATION
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // --- Generic Rules for Requests ---
    function isRequestOwner(collectionName) {
       return request.resource.data.userId == request.auth.uid;
    }

    match /{collectionName}/{requestId} 
      where collectionName in ['withdrawalRequests', 'addFundRequests'] {
      allow read, list: if isFinanceStaff();
      allow create: if isSignedIn() && isRequestOwner(collectionName);
      allow update: if isFinanceStaff();
    }
    
    // TRANSACTIONS
    match /transactions/{transactionId} {
      allow read, list: if isOwner(resource.data.userId) || isFinanceStaff();
      // Transactions are created by server actions (or trusted clients)
      allow create: if isSignedIn();
    }

    // SUPPORT TICKETS
    match /supportTickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isSupportStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(request.resource.data.userId) || isSupportStaff();
      allow list: if isSupportStaff();
    }

    // TOURNAMENTS
    match /tournaments/{tournamentId} {
      allow read, list: if isSignedIn();
      allow write: if isAdmin(); // Admins can create/update/cancel tournaments

      match /participants/{userId} {
        allow create: if isOwner(userId); // Users can join
        allow read, list: if isSignedIn();
        allow update: if isAdmin(); // Admin can update scores etc.
      }
    }

    // SYSTEM STATS (Fixes "Could not load admin data")
    match /systemStats/global {
      allow read, write: if isFinanceStaff(); // Admin/Finance can access and create/update
    }

    // ACTIVITY LOGS (Server-only actions can write)
    match /activityLogs/{logId} {
      allow read, write: if false;
    }

    // FRAUD ALERTS (Server-only actions can write)
    match /fraudAlerts/{alertId} {
      allow read, write: if false;
    }
  }
}