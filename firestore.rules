
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Safely get a user's role. Returns 'player' if not found.
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isSuperAdmin() {
      return isSignedIn() && getRole(request.auth.uid) == 'super-admin';
    }

    function isAdmin() {
      return isSignedIn() && getRole(request.auth.uid) in ['admin', 'super-admin'];
    }
    
    function isFinanceStaff() {
      return isSignedIn() && getRole(request.auth.uid) in ['finance-staff', 'admin', 'super-admin'];
    }

    function isSupportStaff() {
      return isSignedIn() && getRole(request.auth.uid) in ['support-staff', 'admin', 'super-admin'];
    }
    
    // --- Collection Rules ---

    // USERS
    // Users can read any profile (for leaderboards etc.), but can only update their own non-critical data.
    // Admins can update any user. Creation is locked down to match auth data.
    match /users/{userId} {
      allow read: if isSignedIn();
      
      allow create: if isOwner(userId) &&
                      request.resource.data.uid == userId &&
                      request.resource.data.isBlocked == false;

      // Users can update their own doc, but cannot change their role or blocked status.
      // Critical data like balance is updated via server actions, which are trusted.
      // Admins have full update rights.
      allow update: if (isOwner(userId) &&
                        request.resource.data.role == resource.data.role &&
                        request.resource.data.isBlocked == resource.data.isBlocked)
                    || isAdmin();

      allow delete: if isSuperAdmin(); // Only super admins can delete users.

      // Notifications Subcollection
      match /notifications/{notificationId} {
        allow read, update: if isOwner(userId); // Users can read/update their own notifications (e.g., mark as read).
        allow create, delete: if false; // Notifications are created by the server.
      }
    }

    // TRANSACTIONS
    // Users can only read their own transactions. Admins can read all.
    // Creation happens via server actions, so client cannot write.
    match /transactions/{transactionId} {
      allow read: if isOwner(request.resource.data.userId) || isFinanceStaff();
      allow create, update, delete: if false; // All transactions are server-managed.
    }

    // WITHDRAWAL & ADD FUND REQUESTS
    // Users can create their own requests and read them. Finance staff can read/update all.
    match /withdrawalRequests/{requestId} {
      allow read: if isOwner(request.resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff(); // Only finance can approve/reject.
      allow delete: if false;
    }
    
    match /addFundRequests/{requestId} {
      allow read: if isOwner(request.resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff();
      allow delete: if false;
    }
    
    // SUPPORT TICKETS
    // Users can create/read/update their own tickets. Support staff can read/update all.
    match /supportTickets/{ticketId} {
      function isTicketOwner(ticket) {
        return request.auth.uid == ticket.userId;
      }
      
      // On create, user can only set their own user ID and the screenshot URL must be valid.
      allow create: if isOwner(request.resource.data.userId) &&
                      (request.resource.data.screenshotURL == null ||
                       (request.resource.data.screenshotURL is string &&
                        request.resource.data.screenshotURL.matches('https://firebasestorage.googleapis.com/.*')));

      allow read: if isTicketOwner(resource.data) || isSupportStaff();
      
      // Users can update their own tickets (add messages), and support staff can update any ticket.
      allow update: if isTicketOwner(resource.data) || isSupportStaff();

      allow delete: if false;
    }

    // TOURNAMENTS
    // All users can read tournament info. Only admins can create/update them.
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow create, delete: if isSuperAdmin();

      // Users can add themselves to the participants array. Admins can update anything else.
      allow update: if (isSignedIn() &&
                        // This allows a user to add their own UID to the participants array
                        request.resource.data.participants == resource.data.participants.concat([request.auth.uid]))
                    || isAdmin();

      // Participants Subcollection
      match /participants/{userId} {
        allow read: if isSignedIn();
        // A user can create their own participant document when joining.
        allow create: if isOwner(userId);
        // Scores are updated by server actions, so allow owner to update. Admins can also update.
        allow update: if isOwner(userId) || isAdmin();
        allow delete: if isAdmin();
      }
    }
    
    // USER REWARDS
    // Users can only read their own reward data. Server handles updates.
    match /userRewards/{userId} {
      allow read: if isOwner(userId);
      allow create, update, delete: if false; // Server-managed
    }

    // SYSTEM & APP CONFIG
    // All users can read the app configuration. Only super admins can change it.
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    match /systemStats/{docId} {
      allow read: if isFinanceStaff();
      allow write: if false; // Server-managed
    }
    
    // LOGS & ALERTS
    // These are write-only for the server and readable only by admins.
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Server-managed
    }
    
    match /fraudAlerts/{alertId} {
      allow read: if isAdmin();
      allow write: if false; // Server-managed
    }
  }
}
