
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getRole() {
      // Fetches the role of the currently authenticated user.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isSuperAdmin() {
      return isAuthenticated() && getRole() == 'super-admin';
    }

    function isAdmin() {
      return isAuthenticated() && (getRole() == 'admin' || isSuperAdmin());
    }
    
    function isSupportStaff() {
      return isAuthenticated() && (getRole() == 'support-staff' || isAdmin());
    }

    function isFinanceStaff() {
      return isAuthenticated() && (getRole() == 'finance-staff' || isAdmin());
    }
    
    function isUpdatingSafeFields() {
        // Defines the list of fields a user is allowed to change on their own profile.
        let allowedFields = [
            'displayName', 'photoURL', 'lastActive', 'isOnline', 'currentGame', 
            'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'toursCompleted',
            'friendRequestsSent', 'friendRequestsReceived', 'friends', 'tags',
            'manualWinRateOverride', 'recentSpinHistory'
        ];
        // This checks that the incoming request is ONLY trying to modify fields from the allowed list.
        return request.resource.data.keys().hasAll(resource.data.keys()) &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow get, list: if isAuthenticated();
      
      // Admins can update any user. Users can update their own profile with restrictions.
      allow update: if isAdmin() || (isOwner(userId) && isUpdatingSafeFields());
      
      allow delete: if false;

      // Subcollections
      match /notifications/{notificationId} {
        allow read, list: if isOwner(userId);
        allow create, update, delete: if isAdmin(); // Server-side/admin only
      }
    }

    // --- App Configuration & System Stats ---
    match /appConfiguration/{docId} {
      allow get: if true;
      allow write: if isSuperAdmin();
    }
    
    match /systemStats/{docId} {
      allow read, write: if isAdmin();
    }

    // --- Financial Collections ---
    match /transactions/{transactionId} {
      allow get, list: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create, update, delete: if false; // Server-side only
    }

    match /addFundRequests/{requestId} {
      allow get, list: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff(); // Only staff can approve/reject
      allow delete: if false;
    }

    match /withdrawalRequests/{requestId} {
      allow get, list: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff();
      allow delete: if false;
    }
    
    // --- Support Tickets ---
    match /supportTickets/{ticketId} {
      allow get, list: if isOwner(resource.data.userId) || isSupportStaff();
      // Allow user to create a ticket. Check for valid screenshot URL.
      allow create: if isOwner(request.resource.data.userId) &&
                     (!request.resource.data.keys().hasAny(['screenshotURL']) || 
                      (request.resource.data.keys().has('screenshotURL') && request.resource.data.screenshotURL.matches('https://firebasestorage.googleapis.com/.*')));
      // Allow owner or support staff to update (e.g., add a message).
      allow update: if isOwner(resource.data.userId) || isSupportStaff();
      allow delete: if false;
    }
    
    // --- Rewards & Tournaments ---
    match /userRewards/{userId} {
      allow get: if isOwner(userId);
      allow create, update, delete: if false; // Server-side only
    }
    
    match /tournaments/{tournamentId} {
        allow get, list: if isAuthenticated();
        allow create, update: if isAdmin();
        allow delete: if isSuperAdmin();

        // Server action to join a tournament needs to update the participants array.
        // We allow this only if the user is adding THEMSELVES and nothing else.
        allow update: if isAuthenticated() &&
                       request.resource.data.participants == resource.data.participants.concat([request.auth.uid]);
        
        match /participants/{userId} {
            allow get, list: if isAuthenticated();
            // A user can create their own participant document when joining.
            allow create: if isOwner(userId) && request.resource.data.userId == userId;
            allow update: if isAdmin(); // Scores updated by server/admin
            allow delete: if false;
        }
    }
    
    // --- Admin-Only Collections ---
    match /activityLogs/{logId} {
      allow read, write: if false; // Server-side only
    }
    
    match /fraudAlerts/{alertId} {
      allow read, write: if isAdmin();
    }
  }
}
