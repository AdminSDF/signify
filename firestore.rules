
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      // Checks if the requesting user has the admin flag in their own user document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    match /users/{userId} {
      // Any signed-in user can read another user's public profile.
      // A user can only create their own document.
      // A user can update their own document, or an admin can.
      allow get: if isSignedIn();
      // NOTE: The list rule is needed for the findUserByEmail feature. 
      // This is not ideal for security as it allows broader queries on the users collection.
      allow list: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isAdmin();
    }

    match /users/{userId}/notifications/{notificationId} {
      // Users can only access their own notifications.
      allow read, write: if request.auth.uid == userId;
    }
    
    match /transactions/{transactionId} {
      // User can create and read their own transactions.
      // Admin can read all transactions for auditing.
      allow create: if request.resource.data.userId == request.auth.uid;
      allow read: if resource.data.userId == request.auth.uid || isAdmin();
      allow list: if isAdmin();
      allow update, delete: if isAdmin();
    }

    match /{requestCollection=withdrawalRequests,addFundRequests}/{requestId} {
       // User can create their own requests.
       // User and Admin can read requests.
       // Only Admin can update/delete requests.
       allow create: if request.resource.data.userId == request.auth.uid;
       allow read: if resource.data.userId == request.auth.uid || isAdmin();
       allow update, delete: if isAdmin();
    }

    match /appConfiguration/{docId} {
      // App configuration is public to read.
      // Only Admin can write to it.
      allow read: if true;
      allow write: if isAdmin();
    }

    match /supportTickets/{ticketId} {
      // User can create their own tickets.
      // User and Admin can read them.
      // Only Admin can update them.
       allow create: if request.resource.data.userId == request.auth.uid;
       allow read: if resource.data.userId == request.auth.uid || isAdmin();
       allow update: if isAdmin();
    }

    match /activityLogs/{logId} {
      // Any signed-in user can create an activity log for themselves.
      // Only admin can read logs.
      allow create: if request.resource.data.userId == request.auth.uid;
      allow read, list: if isAdmin();
    }

    match /fraudAlerts/{alertId} {
      // Only Admin can access fraud alerts.
       allow read, write: if isAdmin();
    }
    
    match /systemStats/{docId} {
      // Only Admin can access system stats.
       allow read, write: if isAdmin();
    }

    match /userRewards/{userId} {
      // User can read and write to their own rewards document. Admin can too.
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    match /tournaments/{tournamentId} {
      // Any signed-in user can read tournament info.
      // Only Admin can create/update tournaments.
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /userTournaments/{userTournamentId} {
      // User can create/update their own tournament entry.
      // User can read their own entry, Admin can read any.
      allow create, update: if request.resource.data.userId == request.auth.uid;
      allow read: if resource.data.userId == request.auth.uid || isAdmin();
      allow list: if isAdmin();
    }
  }
}
