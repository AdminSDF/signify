rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Safely checks for the existence of the user document before accessing its data.
    // This fixes the sign-up error for new users.
    function getUserRole(userId) {
      let userDocPath = /databases/$(database)/documents/users/$(userId);
      if (exists(userDocPath)) {
        return get(userDocPath).data.role;
      }
      // Default role for non-existent doc (new user) or if role is not set
      return 'player';
    }

    function isSuperAdmin() {
      return isAuth() && getUserRole(request.auth.uid) == 'super-admin';
    }

    function isAdmin() {
      return isAuth() && getUserRole(request.auth.uid) in ['admin', 'super-admin'];
    }

    function isFinanceStaff() {
      return isAuth() && getUserRole(request.auth.uid) in ['finance-staff', 'admin', 'super-admin'];
    }

    function isSupportStaff() {
      return isAuth() && getUserRole(request.auth.uid) in ['support-staff', 'admin', 'super-admin'];
    }
    
    // COLLECTION RULES
    
    // Users Collection
    match /users/{userId} {
      // READ: A user can read their own doc. Admins can read any.
      allow read: if isUser(userId) || isAdmin();
      // LIST: Admins can list all users for the admin panel.
      allow list: if isAdmin();
      // CREATE: A new user can create their own document.
      allow create: if isUser(userId);
      // UPDATE: A user can update their own data, but not critical fields like balance or role. Admins can update anything.
      allow update: if (isUser(userId) && !('balances' in request.resource.data) && !('role' in request.resource.data) && !('spinsAvailable' in request.resource.data)) || isAdmin();

      // Notifications Subcollection
      match /notifications/{notificationId} {
        allow read, list, update: if isUser(userId);
        // Created by server actions (authenticated as admin) when friends accept requests etc.
        allow create: if isAdmin();
      }
    }

    // App Configuration
    match /appConfiguration/main {
      allow read: if true; // Everyone can read config
      allow write: if isSuperAdmin(); // Only super-admins can change it
    }

    // System-wide Statistics
    match /systemStats/global {
      allow read: if isAdmin();
      // Approvals are done by server actions run by finance staff/admins
      allow write: if isFinanceStaff();
    }

    // User Rewards Data
    match /userRewards/{userId} {
      allow read: if isUser(userId) || isAdmin();
      allow create: if isUser(userId); // For new user signup
      allow update: if isUser(userId) || isAdmin(); // For claiming rewards
    }

    // Finance-related Requests
    match /addFundRequests/{requestId} {
      allow read, list: if isUser(resource.data.userId) || isFinanceStaff();
      allow create: if isUser(request.resource.data.userId);
      // Approvals are done via server action, so finance staff/admins need update permission
      allow update: if isFinanceStaff();
    }

    match /withdrawalRequests/{requestId} {
      allow read, list: if isUser(resource.data.userId) || isFinanceStaff();
      allow create: if isUser(request.resource.data.userId);
      allow update: if isFinanceStaff();
    }

    // Transactions are created by server actions, not directly by users.
    match /transactions/{transactionId} {
      allow read, list: if isUser(resource.data.userId) || isFinanceStaff();
      // Server actions run as admin/finance, so this allows them to create transactions
      allow create: if isFinanceStaff();
    }

    // Support Tickets
    match /supportTickets/{ticketId} {
      allow read, list: if isUser(resource.data.userId) || isSupportStaff();
      allow create: if isUser(request.resource.data.userId);
      // Users and support staff can update (to add messages)
      allow update: if isUser(resource.data.userId) || isSupportStaff();
    }

    // Tournaments
    match /tournaments/{tournamentId} {
      allow read, list: if isAuth(); // Any authenticated user can see tournaments
      allow create, update: if isAdmin(); // Only admins can create/manage them

      // Participants Subcollection
      match /participants/{userId} {
        allow read, list: if isAuth(); // Anyone can see participants for leaderboards
        // A user can join a tournament (create their own participant doc)
        allow create: if isUser(userId);
        // Admins can update scores, etc.
        allow update: if isAdmin();
      }
    }

    // Activity & Fraud (created by server, readable by admins)
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin(); // Logged by server actions
    }

    match /fraudAlerts/{alertId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
    }
  }
}
