
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      // Check if the user's document in Firestore has isAdmin == true.
      // Use exists() to prevent errors if the user doc doesn't exist yet during creation.
      return isAuth() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    // --- User Collection Rules ---
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuth();
      
      // Update rule is complex, handled by a function
      allow update: if isOwner(userId) || isAdmin();
      
      allow delete: if isAdmin();
      
      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // --- App Configuration Rules ---
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // --- Financial Transaction Rules ---
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // Transactions are created by trusted logic (like claiming a reward or finishing a spin), not directly by users.
      // This rule allows the app client logic to create transactions for the logged-in user.
      allow create: if isOwner(request.resource.data.userId); 
      allow update, delete: if isAdmin();
    }
    
    match /withdrawalRequests/{reqId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update, delete: if isAdmin();
    }
    
    match /addFundRequests/{reqId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update, delete: if isAdmin();
    }
    
    // --- Support & Stats Rules ---
    match /supportTickets/{ticketId} {
       allow create: if isOwner(request.resource.data.userId);
       allow read, update, delete: if isAdmin();
    }

    match /activityLogs/{logId} {
      allow create: if isAuth();
      allow read: if isAdmin();
    }

    match /fraudAlerts/{alertId} {
       allow read, create, update, delete: if isAdmin();
    }
    
    match /systemStats/{statId} {
      allow read: if true;
      // Should ideally be updated by cloud functions, but allow admin for now.
      allow write: if isAdmin(); 
    }

    // --- Reward System Rules ---
    match /userRewards/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // User reward doc is created during signup.
      allow create: if isOwner(userId); 
      // User must be able to update their own reward data when they claim it.
      allow update: if isOwner(userId); 
    }
    
    // --- Tournament Rules ---
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /userTournaments/{userTournamentId} {
       // userTournamentId is structured as `${userId}_${tournamentId}`
      allow read: if true;
      allow create: if isOwner(userTournamentId.split('_')[0]); // Can join a tournament
      // Score can only be incremented, and only by the user themselves or an admin.
      allow update: if (isOwner(resource.data.userId) && request.resource.data.score >= resource.data.score) || isAdmin();
    }
  }
}
