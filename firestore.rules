
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getRole(userId) {
        // Before checking the role, we MUST check if the document exists.
        // This is critical for new user creation, where the user doc doesn't exist yet.
        return exists(/databases/$(database)/documents/users/$(userId))
               ? getUserData(userId).role
               : 'player'; // Default to 'player' if doc doesn't exist
    }

    function isAtLeastRole(role) {
      if (!isSignedIn()) {
        return false;
      }
      let userRole = getRole(request.auth.uid);
      if (role == 'player') {
        return userRole in ['player', 'support-staff', 'finance-staff', 'admin', 'super-admin'];
      }
      if (role == 'support-staff') {
        return userRole in ['support-staff', 'admin', 'super-admin'];
      }
      if (role == 'finance-staff') {
        return userRole in ['finance-staff', 'admin', 'super-admin'];
      }
      if (role == 'admin') {
        return userRole in ['admin', 'super-admin'];
      }
      if (role == 'super-admin') {
        return userRole == 'super-admin';
      }
      return false;
    }

    // --- USERS COLLECTION ---
    match /users/{userId} {
      // New users can create their OWN document. This is key for signup.
      allow create: if isOwner(userId);
      
      // Users can read own data. Staff can read any user's data.
      allow read: if isOwner(userId) || isAtLeastRole('support-staff');
      
      // CRITICAL FIX: Users can update own data. Finance Staff (and above) can update ANY user's data for balances.
      allow update: if isOwner(userId) || isAtLeastRole('finance-staff');
      
      // Only super admins can delete users.
      allow delete: if isAtLeastRole('super-admin');
      
      // All staff can list users for the admin panel.
      allow list: if isAtLeastRole('support-staff');

      // --- Sub-collections ---
      match /notifications/{notificationId} {
        allow read, list, update: if isOwner(userId);
        allow create: if isAtLeastRole('support-staff');
      }
    }

    // --- APP CONFIGURATION & STATS ---
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isAtLeastRole('super-admin');
    }
    
    match /systemStats/{docId} {
      // Allow finance staff to read and write. CRITICAL for the approval transaction.
      allow read, write: if isAtLeastRole('finance-staff');
    }

    // --- FINANCIAL REQUESTS ---
    match /{collectionName}/{requestId} where collectionName in ['withdrawalRequests', 'addFundRequests'] {
      allow create: if isOwner(request.resource.data.userId);
      allow read, list: if isAtLeastRole('finance-staff') || (isSignedIn() && get(/databases/$(database)/documents/$(collectionName)/$(requestId)).data.userId == request.auth.uid);
      allow update: if isAtLeastRole('finance-staff');
      allow delete: if isAtLeastRole('admin');
    }
    
    // --- TRANSACTIONS ---
    match /transactions/{transactionId} {
      // The approval action runs with the admin's auth, so they need create permission.
      allow create: if isAtLeastRole('finance-staff');
      allow read, list: if isAtLeastRole('finance-staff') || (isSignedIn() && get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId == request.auth.uid);
      allow update, delete: if false;
    }
    
    // --- OTHER COLLECTIONS ---
    match /supportTickets/{ticketId} {
      allow read, update: if isAtLeastRole('support-staff') || isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if isAtLeastRole('support-staff');
    }
    
    match /userRewards/{userId} {
      allow create: if isOwner(userId); // For new user signup
      allow read: if isOwner(userId);
      allow update: if isOwner(userId); // For daily claims initiated by the user
    }

    match /tournaments/{tournamentId} {
      allow read, list: if true;
      allow create, update: if isAtLeastRole('admin');
      
      match /participants/{userId} {
        allow read: if true;
        allow create: if isOwner(userId);
        allow update: if isAtLeastRole('admin');
      }
    }
    
    // Default deny all other paths that are not explicitly defined.
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
