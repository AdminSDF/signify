
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      // Check if the user is signed in AND their document in Firestore has isAdmin set to true.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Checks if the requesting user is the owner of the document.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // --- Collections Rules ---

    // USERS Collection
    match /users/{userId} {
      // Anyone signed in can view a user's profile (needed for friends lists, etc.).
      allow get: if isSignedIn();
      // Anyone signed in can list users (needed for searching for friends by email).
      allow list: if isSignedIn();
      
      // A user can create their own document upon signup.
      allow create: if isOwner(userId);

      // Update permissions are complex to allow for both self-updates and friend actions.
      allow update: if 
        // 1. Admins can update any user document.
        isAdmin() ||
        // 2. A user can update their own document...
        (
          isOwner(userId) &&
          // ...but they CANNOT change critical fields like admin status or balances.
          // These should only be updated by the admin or trusted server logic.
          !('isAdmin' in request.writeFields) &&
          !('balances' in request.writeFields) &&
          !('spinsAvailable' in request.writeFields) &&
          !('totalWinnings' in request.writeFields) &&
          !('totalDeposited' in request.writeFields) &&
          !('totalWithdrawn' in request.writeFields)
        ) ||
        // 3. Allow another user to update this document ONLY for friend-related actions.
        (
          isSignedIn() && !isOwner(userId) &&
          // Check that the ONLY fields being changed are the ones for the friend system.
          // This prevents a user from changing another user's name, photo, etc.
          request.writeFields.hasOnly(['friends', 'friendRequestsSent', 'friendRequestsReceived'])
        );

      // NOTIFICATIONS Sub-collection
      match /notifications/{notificationId} {
        // A user can read, update (e.g., mark as read), or delete their own notifications.
        allow read, update, delete: if isOwner(userId);
        // Any signed-in user can create a notification for another user (e.g., for a friend request).
        allow create: if isSignedIn();
      }
    }

    // APP CONFIGURATION Collection
    match /appConfiguration/{docId} {
      // Anyone can read the application's configuration.
      allow read: if true;
      // Only admins can change the configuration.
      allow write: if isAdmin();
    }

    // All collections below follow a similar pattern:
    // - The user who owns the document can read/create it.
    // - Admins can read anything.
    // - Updates are usually restricted to admins.

    match /transactions/{txId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if false; // Transactions should be immutable.
    }

    match /withdrawalRequests/{reqId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin();
      allow delete: if false;
    }

    match /addFundRequests/{reqId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin();
      allow delete: if false;
    }
    
    match /supportTickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin();
      allow delete: if false;
    }

    match /userRewards/{userId} {
      // A user can only read and write to their own rewards document.
      allow read, write: if isOwner(userId);
    }
    
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      // Any signed-in user can create an activity log for themselves.
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // TOURNAMENT Collections
    match /tournaments/{tournamentId} {
      // Any signed-in user can view the list of tournaments.
      allow read: if isSignedIn();
      // Only admins can create or modify tournaments.
      allow write: if isAdmin();
    }

    match /userTournaments/{userTournamentId} {
       // A user can access their own tournament data. Admins can read all.
       allow read: if isOwner(resource.data.userId) || isAdmin();
       // A user can create their own entry (join a tournament). Admins can also create.
       allow create: if isOwner(request.resource.data.userId) || isAdmin();
       // A user can update their own score. Admins can update any field.
       allow update: if isOwner(resource.data.userId) || isAdmin();
       allow delete: if false;
    }

    // ADMIN-ONLY Collections
    match /systemStats/{statId} {
      allow read: if isAdmin();
      allow write: if false; // Should be updated by a trusted server/function.
    }
    match /fraudAlerts/{alertId} {
      allow read: if isAdmin();
      allow write: if false; // Should be created by a trusted server/function.
    }
  }
}
