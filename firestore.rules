
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getRole() {
      // Fetches the role of the currently authenticated user.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isSuperAdmin() {
      return isAuthenticated() && getRole() == 'super-admin';
    }

    function isAdmin() {
      return isAuthenticated() && (getRole() == 'admin' || isSuperAdmin());
    }
    
    function isSupportStaff() {
      return isAuthenticated() && (getRole() == 'support-staff' || isAdmin());
    }

    function isFinanceStaff() {
      return isAuthenticated() && (getRole() == 'finance-staff' || isAdmin());
    }
    
    function isUpdatingOwnSafeFields() {
        // Defines the list of fields a user is allowed to change on their own profile.
        // Balances are now included to allow tournament joining. Server actions must be trusted.
        let allowedFields = [
            'displayName', 'photoURL', 'lastActive', 'isOnline', 'currentGame', 
            'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'toursCompleted',
            'friendRequestsSent', 'friendRequestsReceived', 'friends', 'balances'
        ];
        // This checks that the incoming request is ONLY trying to modify fields from the allowed list.
        return request.resource.data.keys().hasAll(resource.data.keys()) &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }
    
    // --- Users Collection ---
    match /users/{userId} {
      allow get, list: if isAuthenticated();
      allow create: if isOwner(userId);
      // Admins can update any user. Users can update their own profile with restrictions.
      allow update: if isAdmin() || (isOwner(userId) && isUpdatingOwnSafeFields());
      allow delete: if false;

      // Subcollections
      match /notifications/{notificationId} {
        allow read, list: if isOwner(userId);
        // Only the server (via admin/system) should create notifications.
        allow create, update, delete: if isAdmin();
      }
    }

    // --- App Configuration & System Stats ---
    match /appConfiguration/{docId} {
      allow get: if true;
      allow write: if isSuperAdmin();
    }
    
    match /systemStats/{docId} {
      allow read: if isAdmin();
      // Allow write access for admins (for transactions)
      allow write: if isFinanceStaff();
    }

    // --- Financial Collections ---
    match /transactions/{transactionId} {
      allow get, list: if isOwner(resource.data.userId) || isFinanceStaff();
      // Allow finance staff to create transaction logs as part of approval process.
      allow create: if isFinanceStaff();
      allow update, delete: if false;
    }

    match /addFundRequests/{requestId} {
      allow get, list: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff(); // Only staff can approve/reject
      allow delete: if false;
    }

    match /withdrawalRequests/{requestId} {
      allow get, list: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isFinanceStaff();
      allow delete: if false;
    }
    
    // --- Support Tickets ---
    match /supportTickets/{ticketId} {
      allow get, list: if isOwner(resource.data.userId) || isSupportStaff();
      // User can create their own ticket.
      allow create: if isOwner(request.resource.data.userId);
      // Allow owner or support staff to update (e.g., add a message or change status).
      allow update: if isOwner(resource.data.userId) || isSupportStaff();
      allow delete: if false;
    }
    
    // --- Rewards & Tournaments ---
    match /userRewards/{userId} {
      allow get: if isOwner(userId);
      // Server actions update this, but they run with user credentials.
      // This needs to be writable by the user, but only in specific ways validated by server.
      // For now, we allow the update, trusting the server action.
      allow update: if isOwner(userId);
      allow create, delete: if false; 
    }
    
    match /tournaments/{tournamentId} {
        allow get, list: if isAuthenticated();
        allow create, update, delete: if isAdmin();

        // Allow a user to add themselves to the participants array
        // This is part of the transaction when joining.
        match /participants/{userId} {
            allow get, list: if isAuthenticated();
            // A user can create their own participant document when joining.
            allow create: if isOwner(userId) && request.resource.data.userId == userId;
            // Admin can update score, etc.
            allow update: if isAdmin();
            allow delete: if false;
        }
    }
    
    // --- Admin-Only Collections ---
    match /activityLogs/{logId} {
      // Nobody can write directly. This is server-side logic only.
      // To enforce this, we can check a custom claim if we had one, or leave as false.
      allow read, write: if false;
    }
    
    match /fraudAlerts/{alertId} {
      allow read, write: if isAdmin();
    }
  }
}
