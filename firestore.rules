
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    // These functions make the rules cleaner and easier to read.
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function getMyData() {
      return getUserData(request.auth.uid);
    }
    
    function hasRole(role) {
      // Allows for a single role string or an array of roles.
      // E.g., hasRole('admin') or hasRole(['admin', 'super-admin'])
      let userRole = getMyData().role;
      if (role is string) {
        return userRole == role;
      }
      if (role is list) {
        return userRole in role;
      }
      return false;
    }

    function isSuperAdmin() {
      return hasRole('super-admin');
    }

    function isAdmin() {
      return hasRole(['admin', 'super-admin']);
    }

    function isFinanceStaff() {
      return hasRole(['finance-staff', 'admin', 'super-admin']);
    }

    function isSupportStaff() {
      return hasRole(['support-staff', 'admin', 'super-admin']);
    }

    // --- COLLECTION RULES ---

    // USERS Collection
    // - Anyone can read public user data (for leaderboards, profiles).
    // - Users can create their own document on sign-up.
    // - Users can only update specific, non-critical fields of their own profile.
    // - Admins can update any user's data.
    match /users/{userId} {
      allow read: if isSignedIn();

      allow create: if isOwner(userId)
                      && request.resource.data.uid == userId
                      && request.resource.data.email == request.auth.token.email;
                      
      allow update: if (isOwner(userId) && request.resource.data.keys().hasOnly([
                        'displayName', 'photoURL', 'isOnline', 'currentGame', 'lastActive', 
                        'upiIdForWithdrawal', 'bankDetailsForWithdrawal', 'toursCompleted', 'tags',
                        'manualWinRateOverride', 'recentSpinHistory', 'vipUntil'
                      ])) || isSuperAdmin();
      
      // Notifications subcollection
      match /notifications/{notifId} {
        allow read, update: if isOwner(userId); // User can read and mark as read.
        allow create, delete: if false; // Created by server actions.
      }
    }

    // APP CONFIGURATION Collection
    // - Any signed-in user can read the app's configuration.
    // - Only Super Admins can write/update the configuration.
    match /appConfiguration/{docId} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin();
    }
    
    // TRANSACTIONS Collection
    // - Users can read their own transactions. Admins can read all.
    // - All writes must be performed by the server (via server actions).
    match /transactions/{txId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff();
      allow write: if false;
    }
    
    // WITHDRAWAL REQUESTS Collection
    // - Users can create their own withdrawal requests.
    // - Users can read their own requests. Admins can read all.
    // - All updates (approve/reject) must come from the server.
    match /withdrawalRequests/{reqId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }
    
    // ADD FUND REQUESTS Collection
    // - Same rules as withdrawal requests.
    match /addFundRequests/{reqId} {
      allow read: if isOwner(resource.data.userId) || isFinanceStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }
    
    // SUPPORT TICKETS Collection
    // - Users can create their own tickets.
    // - Users can read their own tickets. Support Staff can read all.
    // - Support Staff can update tickets (e.g., to resolve them).
    match /supportTickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isSupportStaff();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isSupportStaff();
    }
    
    // ACTIVITY LOGS Collection
    // - Users can create their own activity logs.
    // - Only Admins can read logs.
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }
    
    // FRAUD ALERTS Collection
    // - Client access is denied. This is a server/admin-only collection.
    match /fraudAlerts/{alertId} {
      allow read, write: if false;
    }

    // SYSTEM STATS Collection
    // - Only Admins can read global stats.
    // - Writes must come from the server.
    match /systemStats/{statId} {
        allow read: if isAdmin();
        allow write: if false;
    }

    // USER REWARDS Collection
    // - Users can read their own reward status.
    // - Writes (claiming rewards) must come from the server.
    match /userRewards/{userId} {
      allow read: if isOwner(userId);
      allow write: if false;
    }

    // TOURNAMENTS Collection
    // - Anyone signed in can view tournaments.
    // - Only Super Admins can create or modify tournaments.
    // - Joining a tournament (writing to participants) is handled by the server.
    match /tournaments/{tourneyId} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin();

      match /participants/{userId} {
        allow read: if isAdmin() || isOwner(userId);
        allow write: if false; // Joining is handled by a server action.
      }
    }
  }
}
