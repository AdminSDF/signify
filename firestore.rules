
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---------------------------------------------------------------------
    // Helper Functions
    // ---------------------------------------------------------------------
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper to check if user has isAdmin flag in their Firestore doc
    function isUserAdmin(userId) {
      return isAuthenticated() &&
             userId != null && userId != "" &&
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }
    
    // Helper to check admin by verified email. This acts as a fallback/super-admin check.
    function isSuperAdminByEmail() {
        return isAuthenticated() &&
               request.auth.token.email_verified == true &&
               request.auth.token.email == "jameafaizanrasool@gmail.com";
    }

    // Combined admin check: true if user has the flag OR has the admin email.
    function isAdmin() {
        return isUserAdmin(request.auth.uid) || isSuperAdminByEmail();
    }


    // ---------------------------------------------------------------------
    // USERS Collection
    // ---------------------------------------------------------------------
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();

      allow create: if isOwner(userId) &&
        request.resource.data.uid == userId &&
        request.resource.data.email == request.auth.token.email &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.balance is number &&
        request.resource.data.spinsAvailable is number &&
        request.resource.data.dailyPaidSpinsUsed == 0 &&
        request.resource.data.lastPaidSpinDate is string &&
        // On creation, set isAdmin based on email
        (request.resource.data.isAdmin == (request.auth.token.email == "jameafaizanrasool@gmail.com"));

      allow update: if (isOwner(userId) &&
        // Immutable fields can't be changed by owner
        request.resource.data.uid == resource.data.uid &&
        request.resource.data.email == resource.data.email &&
        request.resource.data.createdAt == resource.data.createdAt &&
        // Owner can't make themselves an admin
        request.resource.data.isAdmin == resource.data.isAdmin
      ) || isAdmin(); // Admin can update anything

      allow delete: if isAdmin();
    }

    // ---------------------------------------------------------------------
    // TRANSACTIONS Collection
    // ---------------------------------------------------------------------
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );

      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.type in ['credit', 'debit'] &&
        request.resource.data.amount is number &&
        request.resource.data.description is string &&
        request.resource.data.status in ['completed', 'pending', 'failed'] &&
        request.resource.data.date is timestamp &&
        (!('balanceBefore' in request.resource.data) || request.resource.data.balanceBefore is number) &&
        (!('balanceAfter' in request.resource.data) || request.resource.data.balanceAfter is number) &&
        request.resource.data.keys().hasOnly([
          'userId', 'type', 'amount', 'description', 'status', 'date',
          'balanceBefore', 'balanceAfter'
        ]);

      allow update, delete: if isAdmin();
    }

    // ---------------------------------------------------------------------
    // WITHDRAWAL REQUESTS
    // ---------------------------------------------------------------------
    match /withdrawalRequests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );

      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.userEmail == request.auth.token.email &&
        request.resource.data.amount is number && request.resource.data.amount > 0 &&
        request.resource.data.paymentMethod in ['upi', 'bank'] &&
        (request.resource.data.paymentMethod == 'upi' ? request.resource.data.upiId is string : true) &&
        (request.resource.data.paymentMethod == 'bank' ?
            request.resource.data.bankDetails.accountHolderName is string &&
            request.resource.data.bankDetails.accountNumber is string &&
            request.resource.data.bankDetails.ifscCode is string
            : true) &&
        request.resource.data.requestDate is timestamp &&
        request.resource.data.status == "pending";

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ---------------------------------------------------------------------
    // ADD FUND REQUESTS
    // ---------------------------------------------------------------------
    match /addFundRequests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );

      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.userEmail == request.auth.token.email &&
        request.resource.data.amount is number && request.resource.data.amount > 0 &&
        request.resource.data.paymentReference is string &&
        request.resource.data.requestDate is timestamp &&
        request.resource.data.status == "pending";

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ---------------------------------------------------------------------
    // APP CONFIGURATION
    // ---------------------------------------------------------------------
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

  }
}
