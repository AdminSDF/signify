rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // Robust check: ensures user document exists and isAdmin field is explicitly true.
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true;
    }

    // --- Global Admin Rule ---
    // This rule gives admins full read/write access to the entire database.
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // --- User-Specific Rules (for non-admins) ---

    match /users/{userId} {
      allow get, list: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /transactions/{transactionId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read: if isOwner(resource.data.userId);
    }

    match /withdrawalRequests/{requestId} {
      allow create: if isOwner(request.resource.data.userId);
    }
    
    match /addFundRequests/{requestId} {
      allow create: if isOwner(request.resource.data.userId);
    }

    match /supportTickets/{ticketId} {
      // User can create their own tickets.
      allow create: if isOwner(request.resource.data.userId);
      // User must be able to read their own ticket for the Storage Rule to work.
      allow get: if isOwner(resource.data.userId);
    }

    match /appConfiguration/{docId} {
      // Any authenticated non-admin user can read the configuration.
      allow read: if request.auth != null;
    }
  }
}
