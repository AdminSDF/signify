
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Safely checks if a user document exists before trying to read from it.
    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }

    // Safely gets the user's role. Returns 'player' if the document doesn't exist.
    // This is crucial for new user sign-ups where the role is not yet set.
    function getUserRole(userId) {
      // Before trying to get data, we must ensure the user has read permission on the document.
      // This is handled in the 'users' collection rules below.
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin() {
      return isAuth() && userExists(request.auth.uid) && getUserRole(request.auth.uid) in ['admin', 'super-admin'];
    }
    
    function isSuperAdmin() {
      return isAuth() && userExists(request.auth.uid) && getUserRole(request.auth.uid) == 'super-admin';
    }

    function isFinanceStaff() {
      return isAuth() && userExists(request.auth.uid) && getUserRole(request.auth.uid) in ['finance-staff', 'admin', 'super-admin'];
    }

    function isSupportStaff() {
      return isAuth() && userExists(request.auth.uid) && getUserRole(request.auth.uid) in ['support-staff', 'admin', 'super-admin'];
    }

    // =================================
    // Collections
    // =================================

    // USERS Collection
    match /users/{userId} {
      // Crucial for Sign-Up: A user can create their own profile document.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Users can read their own profile. Admins can read anyone's profile.
      allow read: if isOwner(userId) || isAdmin();

      // Users can update their own profile. Super-admins can update any profile (e.g., to change roles).
      allow update: if isOwner(userId) || isSuperAdmin();

      // Admins need to list all users for the admin panel.
      allow list: if isAdmin();

      // No one can delete a user document from the client-side.
      allow delete: if false;
      
      // NOTIFICATIONS Sub-collection
      match /notifications/{notificationId} {
        allow read, update, list: if isOwner(userId);
        allow create, delete: if false; // Server-side only
      }
    }
    
    // TRANSACTIONS Collection
    match /transactions/{transactionId} {
      allow read, list: if isAuth() && (isOwner(resource.data.userId) || isFinanceStaff());
      allow write: if false; // Server-side only
    }
    
    // REQUESTS (Withdrawal & Add Fund)
    match /{requestCollection}/{requestId} where requestCollection in ['withdrawalRequests', 'addFundRequests'] {
       allow create: if isOwner(request.resource.data.userId);
       allow read, list: if isAuth() && (isOwner(resource.data.userId) || isFinanceStaff());
       allow update, delete: if false; // Server-side only
    }
    
    // SUPPORT TICKETS Collection
    match /supportTickets/{ticketId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, list: if isAuth() && (isOwner(resource.data.userId) || isSupportStaff());
      allow update: if isAuth() && (isOwner(resource.data.userId) || isSupportStaff());
      allow delete: if false;
    }
    
    // USER REWARDS Collection
    match /userRewards/{userId} {
        // Crucial for Sign-Up: Allows creation of the rewards document at the same time as the user doc.
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow read, update: if isOwner(userId);
        allow delete: if false;
    }
    
    // TOURNAMENTS Collection
    match /tournaments/{tournamentId} {
        allow read, list: if true;
        allow write: if isSuperAdmin();
        
        match /participants/{participantId} {
            allow create: if isOwner(participantId) && request.resource.data.userId == participantId;
            allow read, list: if true;
            allow update, delete: if false; // Server-side only
        }
    }
    
    // System-wide Collections
    match /appConfiguration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    match /systemStats/{docId} {
      allow read: if isAdmin();
      allow write: if false; // Server-side only
    }

    // Default deny all other writes to prevent accidental access.
    match /{path=**} {
      allow write: if false;
    }
  }
}
