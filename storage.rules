rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper: Is the user authenticated?
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper: Is the request from the owner of the resource?
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // --- Profile Photos ---
    // Path: /profile_photos/{userId}
    match /profile_photos/{userId} {
      // Anyone authenticated can read profile photos.
      allow read: if isAuthenticated();
      
      // Only the owner can write (create, update, delete) their own photo.
      // The file must be an image and under 2MB.
      allow write: if isOwner(userId) &&
                      request.resource.contentType.matches('image/.*') &&
                      request.resource.size < 2 * 1024 * 1024;
    }

    // --- Support Ticket Screenshots ---
    // Path: /support_tickets/{ticketId}/{fileName}
    match /support_tickets/{ticketId}/{fileName} {
      // Admins can read any screenshot.
      allow read: if isAuthenticated() &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true;
      
      // Users can write a screenshot IF the corresponding ticket exists in Firestore
      // AND they are the owner of that ticket.
      // The file must be an image and under 5MB.
      allow write: if isAuthenticated() &&
                    request.resource.contentType.matches('image/.*') &&
                    request.resource.size < 5 * 1024 * 1024 &&
                    exists(/databases/$(database)/documents/supportTickets/$(ticketId)) &&
                    get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId == request.auth.uid;
    }
  }
}
